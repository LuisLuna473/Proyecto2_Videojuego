
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000442c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b38  080045fc  080045fc  000055fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007134  08007134  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007134  08007134  00008134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800713c  0800713c  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800713c  0800713c  0000813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007140  08007140  00008140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007144  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000088  080071cc  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080071cc  000092b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b67a  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed9  00000000  00000000  00014732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00016610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002234c  00000000  00000000  00017018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d954  00000000  00000000  00039364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cc1b5  00000000  00000000  00046cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00112e6d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000797  00000000  00000000  00112eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cf0  00000000  00000000  00113648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00116338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045e4 	.word	0x080045e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080045e4 	.word	0x080045e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	4878      	ldr	r0, [pc, #480]	@ (800079c <LCD_Init+0x1ec>)
 80005ba:	f001 fdfb 	bl	80021b4 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 80005be:	2201      	movs	r2, #1
 80005c0:	2113      	movs	r1, #19
 80005c2:	4877      	ldr	r0, [pc, #476]	@ (80007a0 <LCD_Init+0x1f0>)
 80005c4:	f001 fdf6 	bl	80021b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2102      	movs	r1, #2
 80005cc:	4875      	ldr	r0, [pc, #468]	@ (80007a4 <LCD_Init+0x1f4>)
 80005ce:	f001 fdf1 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f001 fa92 	bl	8001afc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4871      	ldr	r0, [pc, #452]	@ (80007a4 <LCD_Init+0x1f4>)
 80005de:	f001 fde9 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005e2:	2014      	movs	r0, #20
 80005e4:	f001 fa8a 	bl	8001afc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	486d      	ldr	r0, [pc, #436]	@ (80007a4 <LCD_Init+0x1f4>)
 80005ee:	f001 fde1 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80005f2:	2096      	movs	r0, #150	@ 0x96
 80005f4:	f001 fa82 	bl	8001afc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	4867      	ldr	r0, [pc, #412]	@ (800079c <LCD_Init+0x1ec>)
 80005fe:	f001 fdd9 	bl	80021b4 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000602:	20e9      	movs	r0, #233	@ 0xe9
 8000604:	f000 f8d0 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x20);
 8000608:	2020      	movs	r0, #32
 800060a:	f000 f973 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800060e:	2011      	movs	r0, #17
 8000610:	f000 f8ca 	bl	80007a8 <LCD_CMD>
	HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f001 fa71 	bl	8001afc <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800061a:	20d1      	movs	r0, #209	@ 0xd1
 800061c:	f000 f8c4 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f967 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x71);
 8000626:	2071      	movs	r0, #113	@ 0x71
 8000628:	f000 f964 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x19);
 800062c:	2019      	movs	r0, #25
 800062e:	f000 f961 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000632:	20d0      	movs	r0, #208	@ 0xd0
 8000634:	f000 f8b8 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x07);
 8000638:	2007      	movs	r0, #7
 800063a:	f000 f95b 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 f958 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 8000644:	2008      	movs	r0, #8
 8000646:	f000 f955 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800064a:	2036      	movs	r0, #54	@ 0x36
 800064c:	f000 f8ac 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000650:	20e8      	movs	r0, #232	@ 0xe8
 8000652:	f000 f94f 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000656:	203a      	movs	r0, #58	@ 0x3a
 8000658:	f000 f8a6 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 800065c:	2005      	movs	r0, #5
 800065e:	f000 f949 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000662:	20c1      	movs	r0, #193	@ 0xc1
 8000664:	f000 f8a0 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x10);
 8000668:	2010      	movs	r0, #16
 800066a:	f000 f943 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x10);
 800066e:	2010      	movs	r0, #16
 8000670:	f000 f940 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 f93d 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 800067a:	2002      	movs	r0, #2
 800067c:	f000 f93a 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000680:	20c0      	movs	r0, #192	@ 0xc0
 8000682:	f000 f891 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f934 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x35);
 800068c:	2035      	movs	r0, #53	@ 0x35
 800068e:	f000 f931 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f92e 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f92b 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f928 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 f925 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80006aa:	20c5      	movs	r0, #197	@ 0xc5
 80006ac:	f000 f87c 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80006b0:	2004      	movs	r0, #4
 80006b2:	f000 f91f 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80006b6:	20d2      	movs	r0, #210	@ 0xd2
 80006b8:	f000 f876 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x01);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f919 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x44);
 80006c2:	2044      	movs	r0, #68	@ 0x44
 80006c4:	f000 f916 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 80006c8:	20c8      	movs	r0, #200	@ 0xc8
 80006ca:	f000 f86d 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x04);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f000 f910 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x67);
 80006d4:	2067      	movs	r0, #103	@ 0x67
 80006d6:	f000 f90d 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x35);
 80006da:	2035      	movs	r0, #53	@ 0x35
 80006dc:	f000 f90a 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x04);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f000 f907 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 f904 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x06);
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 f901 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x24);
 80006f2:	2024      	movs	r0, #36	@ 0x24
 80006f4:	f000 f8fe 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 f8fb 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x37);
 80006fe:	2037      	movs	r0, #55	@ 0x37
 8000700:	f000 f8f8 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x40);
 8000704:	2040      	movs	r0, #64	@ 0x40
 8000706:	f000 f8f5 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x03);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 f8f2 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x10);
 8000710:	2010      	movs	r0, #16
 8000712:	f000 f8ef 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 8000716:	2008      	movs	r0, #8
 8000718:	f000 f8ec 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x80);
 800071c:	2080      	movs	r0, #128	@ 0x80
 800071e:	f000 f8e9 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f8e6 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000728:	202a      	movs	r0, #42	@ 0x2a
 800072a:	f000 f83d 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f8e0 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f8dd 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f8da 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x3F);
 8000740:	203f      	movs	r0, #63	@ 0x3f
 8000742:	f000 f8d7 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000746:	202b      	movs	r0, #43	@ 0x2b
 8000748:	f000 f82e 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f8d1 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 f8ce 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8cb 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0xE0);
 800075e:	20e0      	movs	r0, #224	@ 0xe0
 8000760:	f000 f8c8 	bl	80008f4 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000764:	2029      	movs	r0, #41	@ 0x29
 8000766:	f000 f81f 	bl	80007a8 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800076a:	202c      	movs	r0, #44	@ 0x2c
 800076c:	f000 f81c 	bl	80007a8 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000770:	2020      	movs	r0, #32
 8000772:	f000 f819 	bl	80007a8 <LCD_CMD>
	HAL_Delay(120);
 8000776:	2078      	movs	r0, #120	@ 0x78
 8000778:	f001 f9c0 	bl	8001afc <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 800077c:	2011      	movs	r0, #17
 800077e:	f000 f813 	bl	80007a8 <LCD_CMD>
	HAL_Delay(120);
 8000782:	2078      	movs	r0, #120	@ 0x78
 8000784:	f001 f9ba 	bl	8001afc <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000788:	2029      	movs	r0, #41	@ 0x29
 800078a:	f000 f80d 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <LCD_Init+0x1ec>)
 8000794:	f001 fd0e 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2110      	movs	r1, #16
 80007b6:	484c      	ldr	r0, [pc, #304]	@ (80008e8 <LCD_CMD+0x140>)
 80007b8:	f001 fcfc 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	4849      	ldr	r0, [pc, #292]	@ (80008e8 <LCD_CMD+0x140>)
 80007c2:	f001 fcf7 	bl	80021b4 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d6:	4844      	ldr	r0, [pc, #272]	@ (80008e8 <LCD_CMD+0x140>)
 80007d8:	f001 fcec 	bl	80021b4 <HAL_GPIO_WritePin>
 80007dc:	e005      	b.n	80007ea <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e4:	4840      	ldr	r0, [pc, #256]	@ (80008e8 <LCD_CMD+0x140>)
 80007e6:	f001 fce5 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2180      	movs	r1, #128	@ 0x80
 80007f8:	483c      	ldr	r0, [pc, #240]	@ (80008ec <LCD_CMD+0x144>)
 80007fa:	f001 fcdb 	bl	80021b4 <HAL_GPIO_WritePin>
 80007fe:	e004      	b.n	800080a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	4839      	ldr	r0, [pc, #228]	@ (80008ec <LCD_CMD+0x144>)
 8000806:	f001 fcd5 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081a:	4833      	ldr	r0, [pc, #204]	@ (80008e8 <LCD_CMD+0x140>)
 800081c:	f001 fcca 	bl	80021b4 <HAL_GPIO_WritePin>
 8000820:	e005      	b.n	800082e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000828:	482f      	ldr	r0, [pc, #188]	@ (80008e8 <LCD_CMD+0x140>)
 800082a:	f001 fcc3 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2108      	movs	r1, #8
 800083c:	482c      	ldr	r0, [pc, #176]	@ (80008f0 <LCD_CMD+0x148>)
 800083e:	f001 fcb9 	bl	80021b4 <HAL_GPIO_WritePin>
 8000842:	e004      	b.n	800084e <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4829      	ldr	r0, [pc, #164]	@ (80008f0 <LCD_CMD+0x148>)
 800084a:	f001 fcb3 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	2b00      	cmp	r3, #0
 8000856:	d005      	beq.n	8000864 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2120      	movs	r1, #32
 800085c:	4824      	ldr	r0, [pc, #144]	@ (80008f0 <LCD_CMD+0x148>)
 800085e:	f001 fca9 	bl	80021b4 <HAL_GPIO_WritePin>
 8000862:	e004      	b.n	800086e <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2120      	movs	r1, #32
 8000868:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <LCD_CMD+0x148>)
 800086a:	f001 fca3 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d005      	beq.n	8000884 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <LCD_CMD+0x148>)
 800087e:	f001 fc99 	bl	80021b4 <HAL_GPIO_WritePin>
 8000882:	e004      	b.n	800088e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2110      	movs	r1, #16
 8000888:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <LCD_CMD+0x148>)
 800088a:	f001 fc93 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <LCD_CMD+0x148>)
 80008a0:	f001 fc88 	bl	80021b4 <HAL_GPIO_WritePin>
 80008a4:	e005      	b.n	80008b2 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ac:	4810      	ldr	r0, [pc, #64]	@ (80008f0 <LCD_CMD+0x148>)
 80008ae:	f001 fc81 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da06      	bge.n	80008c8 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <LCD_CMD+0x140>)
 80008c2:	f001 fc77 	bl	80021b4 <HAL_GPIO_WritePin>
 80008c6:	e005      	b.n	80008d4 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <LCD_CMD+0x140>)
 80008d0:	f001 fc70 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2102      	movs	r1, #2
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <LCD_CMD+0x140>)
 80008da:	f001 fc6b 	bl	80021b4 <HAL_GPIO_WritePin>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020400 	.word	0x40020400

080008f4 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	484c      	ldr	r0, [pc, #304]	@ (8000a34 <LCD_DATA+0x140>)
 8000904:	f001 fc56 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2102      	movs	r1, #2
 800090c:	4849      	ldr	r0, [pc, #292]	@ (8000a34 <LCD_DATA+0x140>)
 800090e:	f001 fc51 	bl	80021b4 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000922:	4844      	ldr	r0, [pc, #272]	@ (8000a34 <LCD_DATA+0x140>)
 8000924:	f001 fc46 	bl	80021b4 <HAL_GPIO_WritePin>
 8000928:	e005      	b.n	8000936 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	4840      	ldr	r0, [pc, #256]	@ (8000a34 <LCD_DATA+0x140>)
 8000932:	f001 fc3f 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d005      	beq.n	800094c <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	483c      	ldr	r0, [pc, #240]	@ (8000a38 <LCD_DATA+0x144>)
 8000946:	f001 fc35 	bl	80021b4 <HAL_GPIO_WritePin>
 800094a:	e004      	b.n	8000956 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	@ 0x80
 8000950:	4839      	ldr	r0, [pc, #228]	@ (8000a38 <LCD_DATA+0x144>)
 8000952:	f001 fc2f 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000966:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <LCD_DATA+0x140>)
 8000968:	f001 fc24 	bl	80021b4 <HAL_GPIO_WritePin>
 800096c:	e005      	b.n	800097a <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000974:	482f      	ldr	r0, [pc, #188]	@ (8000a34 <LCD_DATA+0x140>)
 8000976:	f001 fc1d 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	2b00      	cmp	r3, #0
 8000982:	d005      	beq.n	8000990 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2108      	movs	r1, #8
 8000988:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <LCD_DATA+0x148>)
 800098a:	f001 fc13 	bl	80021b4 <HAL_GPIO_WritePin>
 800098e:	e004      	b.n	800099a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2108      	movs	r1, #8
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <LCD_DATA+0x148>)
 8000996:	f001 fc0d 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <LCD_DATA+0x148>)
 80009aa:	f001 fc03 	bl	80021b4 <HAL_GPIO_WritePin>
 80009ae:	e004      	b.n	80009ba <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4821      	ldr	r0, [pc, #132]	@ (8000a3c <LCD_DATA+0x148>)
 80009b6:	f001 fbfd 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <LCD_DATA+0x148>)
 80009ca:	f001 fbf3 	bl	80021b4 <HAL_GPIO_WritePin>
 80009ce:	e004      	b.n	80009da <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <LCD_DATA+0x148>)
 80009d6:	f001 fbed 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ea:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <LCD_DATA+0x148>)
 80009ec:	f001 fbe2 	bl	80021b4 <HAL_GPIO_WritePin>
 80009f0:	e005      	b.n	80009fe <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <LCD_DATA+0x148>)
 80009fa:	f001 fbdb 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da06      	bge.n	8000a14 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <LCD_DATA+0x140>)
 8000a0e:	f001 fbd1 	bl	80021b4 <HAL_GPIO_WritePin>
 8000a12:	e005      	b.n	8000a20 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <LCD_DATA+0x140>)
 8000a1c:	f001 fbca 	bl	80021b4 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2102      	movs	r1, #2
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <LCD_DATA+0x140>)
 8000a26:	f001 fbc5 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000a4e:	202a      	movs	r0, #42	@ 0x2a
 8000a50:	f7ff feaa 	bl	80007a8 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff4a 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x1);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff45 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff3f 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff3a 	bl	80008f4 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000a80:	202b      	movs	r0, #43	@ 0x2b
 8000a82:	f7ff fe91 	bl	80007a8 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff31 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y1);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff2c 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff26 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y2);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff21 	bl	80008f4 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000ab2:	202c      	movs	r0, #44	@ 0x2c
 8000ab4:	f7ff fe78 	bl	80007a8 <LCD_CMD>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000ac8:	202c      	movs	r0, #44	@ 0x2c
 8000aca:	f7ff fe6d 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <LCD_Clear+0x80>)
 8000ad4:	f001 fb6e 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <LCD_Clear+0x84>)
 8000ade:	f001 fb69 	bl	80021b4 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000ae2:	23ef      	movs	r3, #239	@ 0xef
 8000ae4:	f240 123f 	movw	r2, #319	@ 0x13f
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ffa8 	bl	8000a40 <SetWindows>
	for (x = 0; x < 320; x++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e016      	b.n	8000b24 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e00d      	b.n	8000b18 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fef6 	bl	80008f4 <LCD_DATA>
			LCD_DATA(c);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fef1 	bl	80008f4 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2bef      	cmp	r3, #239	@ 0xef
 8000b1c:	d9ee      	bls.n	8000afc <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b2a:	d3e4      	bcc.n	8000af6 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <LCD_Clear+0x84>)
 8000b32:	f001 fb3f 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b56:	202c      	movs	r0, #44	@ 0x2c
 8000b58:	f7ff fe26 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4824      	ldr	r0, [pc, #144]	@ (8000bf4 <FillRect+0xac>)
 8000b62:	f001 fb27 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4823      	ldr	r0, [pc, #140]	@ (8000bf8 <FillRect+0xb0>)
 8000b6c:	f001 fb22 	bl	80021b4 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ff58 	bl	8000a40 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
 8000ba2:	e01a      	b.n	8000bda <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	e010      	b.n	8000bcc <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe9f 	bl	80008f4 <LCD_DATA>
			LCD_DATA(c);
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe9a 	bl	80008f4 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8ea      	bhi.n	8000baa <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8e0      	bhi.n	8000ba4 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2101      	movs	r1, #1
 8000be6:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <FillRect+0xb0>)
 8000be8:	f001 fae4 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	@ 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020400 	.word	0x40020400

08000bfc <LCD_Print>:
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 8000bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c00:	b093      	sub	sp, #76	@ 0x4c
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	466b      	mov	r3, sp
 8000c0e:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d103      	bne.n	8000c1e <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8000c16:	2308      	movs	r3, #8
 8000c18:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d103      	bne.n	8000c2c <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8000c24:	2310      	movs	r3, #16
 8000c26:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d103      	bne.n	8000c3a <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8000c32:	2320      	movs	r3, #32
 8000c34:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8000c36:	2332      	movs	r3, #50	@ 0x32
 8000c38:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff fae8 	bl	8000210 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	1c59      	adds	r1, r3, #1
 8000c48:	1e4b      	subs	r3, r1, #1
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	2300      	movs	r3, #0
 8000c50:	4690      	mov	r8, r2
 8000c52:	4699      	mov	r9, r3
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c68:	460a      	mov	r2, r1
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	461d      	mov	r5, r3
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	00eb      	lsls	r3, r5, #3
 8000c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c7e:	00e2      	lsls	r2, r4, #3
 8000c80:	460b      	mov	r3, r1
 8000c82:	3307      	adds	r3, #7
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	ebad 0d03 	sub.w	sp, sp, r3
 8000c8c:	466b      	mov	r3, sp
 8000c8e:	3300      	adds	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c96:	e00b      	b.n	8000cb0 <LCD_Print+0xb4>
		char_array[i]=text[i];
 8000c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	7819      	ldrb	r1, [r3, #0]
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ca4:	4413      	add	r3, r2
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8000caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cac:	3301      	adds	r3, #1
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1ed      	bne.n	8000c98 <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cc0:	e077      	b.n	8000db2 <LCD_Print+0x1b6>
		charInput = char_array[i];
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8000ccc:	7efb      	ldrb	r3, [r7, #27]
 8000cce:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	483c      	ldr	r0, [pc, #240]	@ (8000dc8 <LCD_Print+0x1cc>)
 8000cd6:	f001 fa6d 	bl	80021b4 <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8000cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cde:	fb03 f202 	mul.w	r2, r3, r2
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cee:	fb03 f202 	mul.w	r2, r3, r2
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	441a      	add	r2, r3
 8000cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	461c      	mov	r4, r3
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d02:	4413      	add	r3, r2
 8000d04:	4622      	mov	r2, r4
 8000d06:	f7ff fe9b 	bl	8000a40 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d0e:	e044      	b.n	8000d9a <LCD_Print+0x19e>
			if (fontSize == 1) {
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10b      	bne.n	8000d2e <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3b20      	subs	r3, #32
 8000d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d24:	4413      	add	r3, r2
 8000d26:	4a29      	ldr	r2, [pc, #164]	@ (8000dcc <LCD_Print+0x1d0>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d10c      	bne.n	8000d4e <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3b20      	subs	r3, #32
 8000d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4a22      	ldr	r2, [pc, #136]	@ (8000dd0 <LCD_Print+0x1d4>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d52:	e01b      	b.n	8000d8c <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8000d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dd02      	ble.n	8000d6c <LCD_Print+0x170>
					c = color;
 8000d66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d6a:	e001      	b.n	8000d70 <LCD_Print+0x174>
				} else {
					c = background;
 8000d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8000d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d72:	121b      	asrs	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdbc 	bl	80008f4 <LCD_DATA>
				LCD_DATA(c);
 8000d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdb7 	bl	80008f4 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8000d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d88:	3301      	adds	r3, #1
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dadf      	bge.n	8000d54 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8000d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d96:	3301      	adds	r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbb6      	blt.n	8000d10 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2101      	movs	r1, #1
 8000da6:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <LCD_Print+0x1cc>)
 8000da8:	f001 fa04 	bl	80021b4 <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8000dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dae:	3301      	adds	r3, #1
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	429a      	cmp	r2, r3
 8000db8:	db83      	blt.n	8000cc2 <LCD_Print+0xc6>
 8000dba:	46b5      	mov	sp, r6
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	374c      	adds	r7, #76	@ 0x4c
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	0800460c 	.word	0x0800460c
 8000dd0:	08004a80 	.word	0x08004a80

08000dd4 <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000de2:	202c      	movs	r0, #44	@ 0x2c
 8000de4:	f7ff fce0 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2110      	movs	r1, #16
 8000dec:	4824      	ldr	r0, [pc, #144]	@ (8000e80 <LCD_Bitmap+0xac>)
 8000dee:	f001 f9e1 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2101      	movs	r1, #1
 8000df6:	4823      	ldr	r0, [pc, #140]	@ (8000e84 <LCD_Bitmap+0xb0>)
 8000df8:	f001 f9dc 	bl	80021b4 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff fe12 	bl	8000a40 <SetWindows>
	unsigned int k = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	e01e      	b.n	8000e64 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e014      	b.n	8000e56 <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd5d 	bl	80008f4 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd55 	bl	80008f4 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d8e6      	bhi.n	8000e2c <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	3301      	adds	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8dc      	bhi.n	8000e26 <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <LCD_Bitmap+0xb0>)
 8000e72:	f001 f99f 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400

08000e88 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	@ 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000e96:	202c      	movs	r0, #44	@ 0x2c
 8000e98:	f7ff fc86 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	484d      	ldr	r0, [pc, #308]	@ (8000fd8 <LCD_Sprite+0x150>)
 8000ea2:	f001 f987 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	484c      	ldr	r0, [pc, #304]	@ (8000fdc <LCD_Sprite+0x154>)
 8000eac:	f001 f982 	bl	80021b4 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f7ff fdb8 	bl	8000a40 <SetWindows>
	int k = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ed8:	fb02 f303 	mul.w	r3, r2, r3
 8000edc:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000ede:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03a      	beq.n	8000f5c <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eea:	e032      	b.n	8000f52 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	1e5a      	subs	r2, r3, #1
 8000f00:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f10:	4413      	add	r3, r2
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f18:	e014      	b.n	8000f44 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fce6 	bl	80008f4 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fcde 	bl	80008f4 <LCD_DATA>
				k = k - 2;
 8000f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	3301      	adds	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbe6      	blt.n	8000f1a <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4e:	3301      	adds	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbc8      	blt.n	8000eec <LCD_Sprite+0x64>
 8000f5a:	e034      	b.n	8000fc6 <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	e02d      	b.n	8000fbe <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	fb03 f202 	mul.w	r2, r3, r2
 8000f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	fb01 f303 	mul.w	r3, r1, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	e014      	b.n	8000fb0 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fcb0 	bl	80008f4 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f96:	3301      	adds	r3, #1
 8000f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fca8 	bl	80008f4 <LCD_DATA>
				k = k + 2;
 8000fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbe6      	blt.n	8000f86 <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	6a3a      	ldr	r2, [r7, #32]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbcd      	blt.n	8000f62 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <LCD_Sprite+0x154>)
 8000fcc:	f001 f8f2 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	@ 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <check_collision>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int check_collision(int jug_x, int jug_y, int green_x, int green_y) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
    return (jug_x < green_x + green_rect_width &&
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <check_collision+0x58>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
            jug_x + jug_width > green_x &&
            jug_y < green_y + green_rect_height &&
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	da16      	bge.n	800102a <check_collision+0x4a>
            jug_x + jug_width > green_x &&
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <check_collision+0x5c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
    return (jug_x < green_x + green_rect_width &&
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	da0f      	bge.n	800102a <check_collision+0x4a>
            jug_y < green_y + green_rect_height &&
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <check_collision+0x60>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	4413      	add	r3, r2
            jug_x + jug_width > green_x &&
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	da08      	bge.n	800102a <check_collision+0x4a>
            jug_y + jug_height > green_y);
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <check_collision+0x64>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
            jug_y < green_y + green_rect_height &&
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	da01      	bge.n	800102a <check_collision+0x4a>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <check_collision+0x4c>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000024 	.word	0x20000024
 800103c:	20000004 	.word	0x20000004
 8001040:	20000028 	.word	0x20000028
 8001044:	20000008 	.word	0x20000008

08001048 <move_jug1_up>:
void move_jug1_up() {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af02      	add	r7, sp, #8
    // Limpiar la posición actual del personaje Jug1 (dibujar un rectángulo blanco sobre la posición anterior)
    FillRect(jug_x, jug_y, jug_width, jug_height, 0xFFFF);  // Color de fondo (blanco)
 800104e:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <move_jug1_up+0xbc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <move_jug1_up+0xc0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <move_jug1_up+0xc4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <move_jug1_up+0xc8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	461c      	mov	r4, r3
 8001066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4623      	mov	r3, r4
 800106e:	f7ff fd6b 	bl	8000b48 <FillRect>

    // Mover hacia arriba si no ha alcanzado el límite
    if (jug_y - move_step >= y_limit_min) {
 8001072:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <move_jug1_up+0xc0>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <move_jug1_up+0xcc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <move_jug1_up+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	db06      	blt.n	8001092 <move_jug1_up+0x4a>
        jug_y -= move_step;
 8001084:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <move_jug1_up+0xc0>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <move_jug1_up+0xcc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <move_jug1_up+0xc0>)
 8001090:	6013      	str	r3, [r2, #0]
    }

    // Dibujar el personaje Jug1 en la nueva posición
    LCD_Bitmap(jug_x, jug_y, jug_width, jug_height, Jug1);  // Dibuja Jug1 en la nueva posición
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <move_jug1_up+0xbc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <move_jug1_up+0xc0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <move_jug1_up+0xc4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <move_jug1_up+0xc8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461c      	mov	r4, r3
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <move_jug1_up+0xd4>)
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4623      	mov	r3, r4
 80010b0:	f7ff fe90 	bl	8000dd4 <LCD_Bitmap>

    // Verificar colisión con el cubo verde
    if (check_collision(jug_x, jug_y, green_rect_x, green_rect_y)) {
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <move_jug1_up+0xbc>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <move_jug1_up+0xc0>)
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <move_jug1_up+0xd8>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <move_jug1_up+0xdc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f7ff ff8c 	bl	8000fe0 <check_collision>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <move_jug1_up+0x90>
    	colision++;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <move_jug1_up+0xe0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <move_jug1_up+0xe0>)
 80010d6:	6013      	str	r3, [r2, #0]
    }

    // Mostrar el contador de colisiones en pantalla
    sprintf(Pant, "Colisiones: %d", colision);
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <move_jug1_up+0xe0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4913      	ldr	r1, [pc, #76]	@ (800112c <move_jug1_up+0xe4>)
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <move_jug1_up+0xe8>)
 80010e2:	f002 fddf 	bl	8003ca4 <siprintf>
    LCD_Print(Pant, 20, 100, 1, 0x001F, 0xFFFF);  // Imprimir colisiones en la pantalla
 80010e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	231f      	movs	r3, #31
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2264      	movs	r2, #100	@ 0x64
 80010f4:	2114      	movs	r1, #20
 80010f6:	480e      	ldr	r0, [pc, #56]	@ (8001130 <move_jug1_up+0xe8>)
 80010f8:	f7ff fd80 	bl	8000bfc <LCD_Print>
}
 80010fc:	bf00      	nop
 80010fe:	3704      	adds	r7, #4
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	2000000c 	.word	0x2000000c
 8001108:	20000010 	.word	0x20000010
 800110c:	20000004 	.word	0x20000004
 8001110:	20000008 	.word	0x20000008
 8001114:	20000000 	.word	0x20000000
 8001118:	20000014 	.word	0x20000014
 800111c:	08005660 	.word	0x08005660
 8001120:	2000001c 	.word	0x2000001c
 8001124:	20000020 	.word	0x20000020
 8001128:	20000148 	.word	0x20000148
 800112c:	080045fc 	.word	0x080045fc
 8001130:	2000014c 	.word	0x2000014c

08001134 <move_jug1_down>:
void move_jug1_down() {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b083      	sub	sp, #12
 8001138:	af02      	add	r7, sp, #8
    // Limpiar la posición actual del personaje Jug1 (dibujar un rectángulo blanco sobre la posición anterior)
    FillRect(jug_x, jug_y, jug_width, jug_height, 0xFFFF);  // Color de fondo (blanco)
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <move_jug1_down+0xbc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <move_jug1_down+0xc0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <move_jug1_down+0xc4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <move_jug1_down+0xc8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	461c      	mov	r4, r3
 8001152:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4623      	mov	r3, r4
 800115a:	f7ff fcf5 	bl	8000b48 <FillRect>

    // Mover hacia abajo si no ha alcanzado el límite
    if (jug_y + move_step <= y_limit_max) {
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <move_jug1_down+0xc0>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <move_jug1_down+0xcc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	441a      	add	r2, r3
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <move_jug1_down+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	dc06      	bgt.n	800117e <move_jug1_down+0x4a>
        jug_y += move_step;
 8001170:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <move_jug1_down+0xc0>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <move_jug1_down+0xcc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <move_jug1_down+0xc0>)
 800117c:	6013      	str	r3, [r2, #0]
    }

    // Dibujar el personaje Jug1 en la nueva posición
    LCD_Bitmap(jug_x, jug_y, jug_width, jug_height, Jug1);  // Dibuja Jug1 en la nueva posición
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <move_jug1_down+0xbc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <move_jug1_down+0xc0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <move_jug1_down+0xc4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <move_jug1_down+0xc8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	461c      	mov	r4, r3
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <move_jug1_down+0xd4>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4623      	mov	r3, r4
 800119c:	f7ff fe1a 	bl	8000dd4 <LCD_Bitmap>

    // Verificar colisión con el cubo verde
    if (check_collision(jug_x, jug_y, green_rect_x, green_rect_y)) {
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <move_jug1_down+0xbc>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <move_jug1_down+0xc0>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <move_jug1_down+0xd8>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <move_jug1_down+0xdc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f7ff ff16 	bl	8000fe0 <check_collision>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <move_jug1_down+0x90>
        colision++;
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <move_jug1_down+0xe0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <move_jug1_down+0xe0>)
 80011c2:	6013      	str	r3, [r2, #0]
    }

    // Mostrar el contador de colisiones en pantalla
    sprintf(Pant, "Colisiones: %d", colision);
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <move_jug1_down+0xe0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4913      	ldr	r1, [pc, #76]	@ (8001218 <move_jug1_down+0xe4>)
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <move_jug1_down+0xe8>)
 80011ce:	f002 fd69 	bl	8003ca4 <siprintf>
    LCD_Print(Pant, 20, 100, 1, 0x001F, 0xFFFF);  // Imprimir colisiones en la pantalla
 80011d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	231f      	movs	r3, #31
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2264      	movs	r2, #100	@ 0x64
 80011e0:	2114      	movs	r1, #20
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <move_jug1_down+0xe8>)
 80011e4:	f7ff fd0a 	bl	8000bfc <LCD_Print>
}
 80011e8:	bf00      	nop
 80011ea:	3704      	adds	r7, #4
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000010 	.word	0x20000010
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000000 	.word	0x20000000
 8001204:	20000018 	.word	0x20000018
 8001208:	08005660 	.word	0x08005660
 800120c:	2000001c 	.word	0x2000001c
 8001210:	20000020 	.word	0x20000020
 8001214:	20000148 	.word	0x20000148
 8001218:	080045fc 	.word	0x080045fc
 800121c:	2000014c 	.word	0x2000014c

08001220 <move_green_cube_left>:
    // Mostrar el contador de colisiones en pantalla
    sprintf(Pant, "Colisiones: %d", colision);
    LCD_Print(Pant, 20, 100, 1, 0x001F, 0xFFFF);  // Imprimir colisiones en la pantalla
}*/

void move_green_cube_left() {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af02      	add	r7, sp, #8
    // Limpiar el cubo verde actual
    FillRect(green_rect_x, green_rect_y, green_rect_width, green_rect_height, 0xFFFF);  // Color de fondo (blanco)
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <move_green_cube_left+0x64>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <move_green_cube_left+0x68>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <move_green_cube_left+0x6c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <move_green_cube_left+0x70>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	461c      	mov	r4, r3
 800123e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	4623      	mov	r3, r4
 8001246:	f7ff fc7f 	bl	8000b48 <FillRect>

    // Mover el cubo verde hacia la izquierda
    green_rect_x -= move_step;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <move_green_cube_left+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <move_green_cube_left+0x74>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <move_green_cube_left+0x64>)
 8001256:	6013      	str	r3, [r2, #0]

    // Dibujar el cubo verde en la nueva posición
    FillRect(green_rect_x, green_rect_y, green_rect_width, green_rect_height, 0x07E0);  // Verde
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <move_green_cube_left+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <move_green_cube_left+0x68>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <move_green_cube_left+0x6c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <move_green_cube_left+0x70>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	461c      	mov	r4, r3
 8001270:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff fc66 	bl	8000b48 <FillRect>
}
 800127c:	bf00      	nop
 800127e:	3704      	adds	r7, #4
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	2000001c 	.word	0x2000001c
 8001288:	20000020 	.word	0x20000020
 800128c:	20000024 	.word	0x20000024
 8001290:	20000028 	.word	0x20000028
 8001294:	20000000 	.word	0x20000000

08001298 <move_green_cube_right>:

void move_green_cube_right() {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af02      	add	r7, sp, #8
    // Limpiar el cubo verde actual
    FillRect(green_rect_x, green_rect_y, green_rect_width, green_rect_height, 0xFFFF);  // Color de fondo (blanco)
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <move_green_cube_right+0x64>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <move_green_cube_right+0x68>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <move_green_cube_right+0x6c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <move_green_cube_right+0x70>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	461c      	mov	r4, r3
 80012b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4623      	mov	r3, r4
 80012be:	f7ff fc43 	bl	8000b48 <FillRect>

    // Mover el cubo verde hacia la derecha
    green_rect_x += move_step;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <move_green_cube_right+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <move_green_cube_right+0x74>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <move_green_cube_right+0x64>)
 80012ce:	6013      	str	r3, [r2, #0]

    // Dibujar el cubo verde en la nueva posición
    FillRect(green_rect_x, green_rect_y, green_rect_width, green_rect_height, 0x07E0);  // Verde
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <move_green_cube_right+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <move_green_cube_right+0x68>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <move_green_cube_right+0x6c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <move_green_cube_right+0x70>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	461c      	mov	r4, r3
 80012e8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4623      	mov	r3, r4
 80012f0:	f7ff fc2a 	bl	8000b48 <FillRect>
}
 80012f4:	bf00      	nop
 80012f6:	3704      	adds	r7, #4
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	2000001c 	.word	0x2000001c
 8001300:	20000020 	.word	0x20000020
 8001304:	20000024 	.word	0x20000024
 8001308:	20000028 	.word	0x20000028
 800130c:	20000000 	.word	0x20000000

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fb7f 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f897 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 f961 	bl	80015e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001322:	f000 f8ff 	bl	8001524 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001326:	f000 f933 	bl	8001590 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart3, data, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	4942      	ldr	r1, [pc, #264]	@ (8001438 <main+0x128>)
 800132e:	4843      	ldr	r0, [pc, #268]	@ (800143c <main+0x12c>)
 8001330:	f001 fd95 	bl	8002e5e <HAL_UART_Receive_IT>
	LCD_Init();
 8001334:	f7ff f93c 	bl	80005b0 <LCD_Init>

	LCD_Clear(0x00);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fbc1 	bl	8000ac0 <LCD_Clear>
	FillRect(0, 0, 319, 239, 0xFFFF);
 800133e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	23ef      	movs	r3, #239	@ 0xef
 8001346:	f240 123f 	movw	r2, #319	@ 0x13f
 800134a:	2100      	movs	r1, #0
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fbfb 	bl	8000b48 <FillRect>
	FillRect(50, 60, 20, 20, 0xF800);
 8001352:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2314      	movs	r3, #20
 800135a:	2214      	movs	r2, #20
 800135c:	213c      	movs	r1, #60	@ 0x3c
 800135e:	2032      	movs	r0, #50	@ 0x32
 8001360:	f7ff fbf2 	bl	8000b48 <FillRect>
	FillRect(70, 60, 20, 20, 0x07E0);
 8001364:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2314      	movs	r3, #20
 800136c:	2214      	movs	r2, #20
 800136e:	213c      	movs	r1, #60	@ 0x3c
 8001370:	2046      	movs	r0, #70	@ 0x46
 8001372:	f7ff fbe9 	bl	8000b48 <FillRect>
	//LCD_Bitmap(0, 0, 320, 240, fondo);
	//LCD_Bitmap(0, 0, 32, 31, Jug2);
	LCD_Bitmap(50, 150, 32, 31, Jug1);
 8001376:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <main+0x130>)
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	231f      	movs	r3, #31
 800137c:	2220      	movs	r2, #32
 800137e:	2196      	movs	r1, #150	@ 0x96
 8001380:	2032      	movs	r0, #50	@ 0x32
 8001382:	f7ff fd27 	bl	8000dd4 <LCD_Bitmap>
	FillRect(90, 60, 20, 20, 0x001F);
 8001386:	231f      	movs	r3, #31
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2314      	movs	r3, #20
 800138c:	2214      	movs	r2, #20
 800138e:	213c      	movs	r1, #60	@ 0x3c
 8001390:	205a      	movs	r0, #90	@ 0x5a
 8001392:	f7ff fbd9 	bl	8000b48 <FillRect>
		/*for(int x = 0; x < 320 -32; x++){
			HAL_Delay(15);
			int anima = (x/35)%3;
			LCD_Sprite(0, 200, 31, 32, colijug1, 3, anima, 0, 1);
		}*/
		for(int c = 0; c < 320 -32; c++){
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e01f      	b.n	80013dc <main+0xcc>
			HAL_Delay(15);
 800139c:	200f      	movs	r0, #15
 800139e:	f000 fbad 	bl	8001afc <HAL_Delay>
			int anima1 = (c/2)%2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0fda      	lsrs	r2, r3, #31
 80013a6:	4413      	add	r3, r2
 80013a8:	105b      	asrs	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	bfb8      	it	lt
 80013b2:	425b      	neglt	r3, r3
 80013b4:	603b      	str	r3, [r7, #0]
			LCD_Sprite(0, 200, 29, 41, movjug1, 2, anima1, 0, 1);
 80013b6:	2301      	movs	r3, #1
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9303      	str	r3, [sp, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2302      	movs	r3, #2
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <main+0x134>)
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2329      	movs	r3, #41	@ 0x29
 80013cc:	221d      	movs	r2, #29
 80013ce:	21c8      	movs	r1, #200	@ 0xc8
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fd59 	bl	8000e88 <LCD_Sprite>
		for(int c = 0; c < 320 -32; c++){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3301      	adds	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 80013e2:	dbdb      	blt.n	800139c <main+0x8c>
		}

		if (received_char == 'g') {
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <main+0x138>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b67      	cmp	r3, #103	@ 0x67
 80013ec:	d104      	bne.n	80013f8 <main+0xe8>
		    //move_blue_cube_up();  // Mover cubo azul hacia arriba
		    move_jug1_up();
 80013ee:	f7ff fe2b 	bl	8001048 <move_jug1_up>
		    received_char = 0;  // Resetear el comando
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <main+0x138>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
		}


		if (received_char == 'h') {
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <main+0x138>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b68      	cmp	r3, #104	@ 0x68
 8001400:	d104      	bne.n	800140c <main+0xfc>
		    //move_blue_cube_down();  // Mover cubo azul hacia abajo
			move_jug1_down();
 8001402:	f7ff fe97 	bl	8001134 <move_jug1_down>
		    received_char = 0;  // Resetear el comando
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <main+0x138>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		}
		if (received_char == 'e') {
 800140c:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <main+0x138>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b65      	cmp	r3, #101	@ 0x65
 8001414:	d104      	bne.n	8001420 <main+0x110>
		    move_green_cube_left();  // Mover cubo verde hacia la izquierda
 8001416:	f7ff ff03 	bl	8001220 <move_green_cube_left>
		    received_char = 0;  // Resetear el comando
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <main+0x138>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		}
		if(received_char == 'f'){
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <main+0x138>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b66      	cmp	r3, #102	@ 0x66
 8001428:	d1b5      	bne.n	8001396 <main+0x86>
			move_green_cube_right();
 800142a:	f7ff ff35 	bl	8001298 <move_green_cube_right>
			received_char = 0;
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <main+0x138>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
		for(int c = 0; c < 320 -32; c++){
 8001434:	e7af      	b.n	8001396 <main+0x86>
 8001436:	bf00      	nop
 8001438:	20000144 	.word	0x20000144
 800143c:	200000fc 	.word	0x200000fc
 8001440:	08005660 	.word	0x08005660
 8001444:	08005de0 	.word	0x08005de0
 8001448:	20000145 	.word	0x20000145

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2234      	movs	r2, #52	@ 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fc42 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <SystemClock_Config+0xd0>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a28      	ldr	r2, [pc, #160]	@ (800151c <SystemClock_Config+0xd0>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b26      	ldr	r3, [pc, #152]	@ (800151c <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <SystemClock_Config+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <SystemClock_Config+0xd4>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <SystemClock_Config+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014c0:	2308      	movs	r3, #8
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80014c4:	2350      	movs	r3, #80	@ 0x50
 80014c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 f949 	bl	8002770 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014e4:	f000 f926 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2102      	movs	r1, #2
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fe6f 	bl	80021e8 <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001510:	f000 f910 	bl	8001734 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3750      	adds	r7, #80	@ 0x50
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_SPI1_Init+0x64>)
 800152a:	4a18      	ldr	r2, [pc, #96]	@ (800158c <MX_SPI1_Init+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001554:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001570:	220a      	movs	r2, #10
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001576:	f001 fb99 	bl	8002cac <HAL_SPI_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001580:	f000 f8d8 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200000a4 	.word	0x200000a4
 800158c:	40013000 	.word	0x40013000

08001590 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <MX_USART3_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 800159c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015b6:	2204      	movs	r2, #4
 80015b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_USART3_UART_Init+0x4c>)
 80015c8:	f001 fbf9 	bl	8002dbe <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f000 f8af 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200000fc 	.word	0x200000fc
 80015e0:	40004800 	.word	0x40004800

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a3a      	ldr	r2, [pc, #232]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <MX_GPIO_Init+0x108>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <MX_GPIO_Init+0x108>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a33      	ldr	r2, [pc, #204]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a2c      	ldr	r2, [pc, #176]	@ (80016ec <MX_GPIO_Init+0x108>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a25      	ldr	r2, [pc, #148]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <MX_GPIO_Init+0x108>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2182      	movs	r1, #130	@ 0x82
 800166e:	4820      	ldr	r0, [pc, #128]	@ (80016f0 <MX_GPIO_Init+0x10c>)
 8001670:	f000 fda0 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001674:	2200      	movs	r2, #0
 8001676:	f240 7113 	movw	r1, #1811	@ 0x713
 800167a:	481e      	ldr	r0, [pc, #120]	@ (80016f4 <MX_GPIO_Init+0x110>)
 800167c:	f000 fd9a 	bl	80021b4 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001680:	2200      	movs	r2, #0
 8001682:	f240 4179 	movw	r1, #1145	@ 0x479
 8001686:	481c      	ldr	r0, [pc, #112]	@ (80016f8 <MX_GPIO_Init+0x114>)
 8001688:	f000 fd94 	bl	80021b4 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 800168c:	2382      	movs	r3, #130	@ 0x82
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001698:	2302      	movs	r3, #2
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <MX_GPIO_Init+0x10c>)
 80016a4:	f000 fbf2 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80016a8:	f240 7313 	movw	r3, #1811	@ 0x713
 80016ac:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b6:	2302      	movs	r3, #2
 80016b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <MX_GPIO_Init+0x110>)
 80016c2:	f000 fbe3 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80016c6:	f240 4379 	movw	r3, #1145	@ 0x479
 80016ca:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <MX_GPIO_Init+0x114>)
 80016e0:	f000 fbd4 	bl	8001e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	@ 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400

080016fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	received_char = data[0];
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_UART_RxCpltCallback+0x28>)
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_UART_RxCpltCallback+0x2c>)
 800170a:	701a      	strb	r2, [r3, #0]
	new_command = 1;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <HAL_UART_RxCpltCallback+0x30>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, data, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	4903      	ldr	r1, [pc, #12]	@ (8001724 <HAL_UART_RxCpltCallback+0x28>)
 8001716:	4806      	ldr	r0, [pc, #24]	@ (8001730 <HAL_UART_RxCpltCallback+0x34>)
 8001718:	f001 fba1 	bl	8002e5e <HAL_UART_Receive_IT>

}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000144 	.word	0x20000144
 8001728:	20000145 	.word	0x20000145
 800172c:	20000146 	.word	0x20000146
 8001730:	200000fc 	.word	0x200000fc

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <HAL_SPI_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12b      	bne.n	800180a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_SPI_MspInit+0x88>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_SPI_MspInit+0x88>)
 80017bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_SPI_MspInit+0x88>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_SPI_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <HAL_SPI_MspInit+0x88>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_SPI_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017ea:	23e0      	movs	r3, #224	@ 0xe0
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017fa:	2305      	movs	r3, #5
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <HAL_SPI_MspInit+0x8c>)
 8001806:	f000 fb41 	bl	8001e8c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40013000 	.word	0x40013000
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_UART_MspInit+0x94>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d134      	bne.n	80018ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <HAL_UART_MspInit+0x98>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <HAL_UART_MspInit+0x98>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_UART_MspInit+0x98>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_UART_MspInit+0x98>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <HAL_UART_MspInit+0x98>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_UART_MspInit+0x98>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800187a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800188c:	2307      	movs	r3, #7
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4809      	ldr	r0, [pc, #36]	@ (80018bc <HAL_UART_MspInit+0x9c>)
 8001898:	f000 faf8 	bl	8001e8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2027      	movs	r0, #39	@ 0x27
 80018a2:	f000 fa2a 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018a6:	2027      	movs	r0, #39	@ 0x27
 80018a8:	f000 fa43 	bl	8001d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40004800 	.word	0x40004800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020800 	.word	0x40020800

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <MemManage_Handler+0x4>

080018d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001916:	f000 f8d1 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <USART3_IRQHandler+0x10>)
 8001926:	f001 fabf 	bl	8002ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200000fc 	.word	0x200000fc

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	@ (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f002 f9c6 	bl	8003cf4 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20020000 	.word	0x20020000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000160 	.word	0x20000160
 800199c:	200002b0 	.word	0x200002b0

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019c8:	f7ff ffea 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f002 f985 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fc8b 	bl	8001310 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a08:	08007144 	.word	0x08007144
  ldr r2, =_sbss
 8001a0c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a10:	200002b0 	.word	0x200002b0

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f94f 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	200f      	movs	r0, #15
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fe78 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f967 	bl	8001d4e <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f92f 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	@ (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000002c 	.word	0x2000002c
 8001ab4:	20000034 	.word	0x20000034
 8001ab8:	20000030 	.word	0x20000030

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000034 	.word	0x20000034
 8001ae0:	20000164 	.word	0x20000164

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000164 	.word	0x20000164

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000034 	.word	0x20000034

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4907      	ldr	r1, [pc, #28]	@ (8001be0 <__NVIC_EnableIRQ+0x38>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	@ (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	@ (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	@ 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	@ 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff8e 	bl	8001be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff29 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff3e 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff8e 	bl	8001c38 <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5d 	bl	8001be4 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff31 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff feb6 	bl	8001ae4 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d008      	beq.n	8001d98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2280      	movs	r2, #128	@ 0x80
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e052      	b.n	8001e3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0216 	bic.w	r2, r2, #22
 8001da6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001db6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <HAL_DMA_Abort+0x62>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0208 	bic.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de8:	e013      	b.n	8001e12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dea:	f7ff fe7b 	bl	8001ae4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d90c      	bls.n	8001e12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e015      	b.n	8001e3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e4      	bne.n	8001dea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	223f      	movs	r2, #63	@ 0x3f
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d004      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2280      	movs	r2, #128	@ 0x80
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e00c      	b.n	8001e7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2205      	movs	r2, #5
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e165      	b.n	8002174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8154 	bne.w	800216e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d005      	beq.n	8001ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d130      	bne.n	8001f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d017      	beq.n	8001f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d123      	bne.n	8001fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80ae 	beq.w	800216e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b5d      	ldr	r3, [pc, #372]	@ (800218c <HAL_GPIO_Init+0x300>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	4a5c      	ldr	r2, [pc, #368]	@ (800218c <HAL_GPIO_Init+0x300>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002020:	6453      	str	r3, [r2, #68]	@ 0x44
 8002022:	4b5a      	ldr	r3, [pc, #360]	@ (800218c <HAL_GPIO_Init+0x300>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202e:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_GPIO_Init+0x304>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4f      	ldr	r2, [pc, #316]	@ (8002194 <HAL_GPIO_Init+0x308>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4e      	ldr	r2, [pc, #312]	@ (8002198 <HAL_GPIO_Init+0x30c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x216>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4d      	ldr	r2, [pc, #308]	@ (800219c <HAL_GPIO_Init+0x310>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x212>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4c      	ldr	r2, [pc, #304]	@ (80021a0 <HAL_GPIO_Init+0x314>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x20e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4b      	ldr	r2, [pc, #300]	@ (80021a4 <HAL_GPIO_Init+0x318>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x20a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4a      	ldr	r2, [pc, #296]	@ (80021a8 <HAL_GPIO_Init+0x31c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x206>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a49      	ldr	r2, [pc, #292]	@ (80021ac <HAL_GPIO_Init+0x320>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x202>
 800208a:	2306      	movs	r3, #6
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800208e:	2307      	movs	r3, #7
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	@ (8002190 <HAL_GPIO_Init+0x304>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b3a      	ldr	r3, [pc, #232]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a31      	ldr	r2, [pc, #196]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b2f      	ldr	r3, [pc, #188]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a26      	ldr	r2, [pc, #152]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae96 	bls.w	8001ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cc      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90c      	bls.n	8002224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b65      	ldr	r3, [pc, #404]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a58      	ldr	r2, [pc, #352]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d044      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b3f      	ldr	r3, [pc, #252]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e067      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4934      	ldr	r1, [pc, #208]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7ff fc04 	bl	8001ae4 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff fc00 	bl	8001ae4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d20c      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f855 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fb64 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	080070e8 	.word	0x080070e8
 80023ac:	2000002c 	.word	0x2000002c
 80023b0:	20000030 	.word	0x20000030

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000002c 	.word	0x2000002c

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	080070f8 	.word	0x080070f8

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	@ (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	080070f8 	.word	0x080070f8

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002420:	b0a6      	sub	sp, #152	@ 0x98
 8002422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002442:	4bc8      	ldr	r3, [pc, #800]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b0c      	cmp	r3, #12
 800244c:	f200 817e 	bhi.w	800274c <HAL_RCC_GetSysClockFreq+0x330>
 8002450:	a201      	add	r2, pc, #4	@ (adr r2, 8002458 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800248d 	.word	0x0800248d
 800245c:	0800274d 	.word	0x0800274d
 8002460:	0800274d 	.word	0x0800274d
 8002464:	0800274d 	.word	0x0800274d
 8002468:	08002495 	.word	0x08002495
 800246c:	0800274d 	.word	0x0800274d
 8002470:	0800274d 	.word	0x0800274d
 8002474:	0800274d 	.word	0x0800274d
 8002478:	0800249d 	.word	0x0800249d
 800247c:	0800274d 	.word	0x0800274d
 8002480:	0800274d 	.word	0x0800274d
 8002484:	0800274d 	.word	0x0800274d
 8002488:	08002607 	.word	0x08002607
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4bb6      	ldr	r3, [pc, #728]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x34c>)
 800248e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8002492:	e15f      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4bb5      	ldr	r3, [pc, #724]	@ (800276c <HAL_RCC_GetSysClockFreq+0x350>)
 8002496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800249a:	e15b      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249c:	4bb1      	ldr	r3, [pc, #708]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a8:	4bae      	ldr	r3, [pc, #696]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d031      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b4:	4bab      	ldr	r3, [pc, #684]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	2200      	movs	r2, #0
 80024bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024c8:	2300      	movs	r3, #0
 80024ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80024cc:	4ba7      	ldr	r3, [pc, #668]	@ (800276c <HAL_RCC_GetSysClockFreq+0x350>)
 80024ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024d2:	462a      	mov	r2, r5
 80024d4:	fb03 f202 	mul.w	r2, r3, r2
 80024d8:	2300      	movs	r3, #0
 80024da:	4621      	mov	r1, r4
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	4aa2      	ldr	r2, [pc, #648]	@ (800276c <HAL_RCC_GetSysClockFreq+0x350>)
 80024e4:	4621      	mov	r1, r4
 80024e6:	fba1 1202 	umull	r1, r2, r1, r2
 80024ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024ec:	460a      	mov	r2, r1
 80024ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80024f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80024f2:	4413      	add	r3, r2
 80024f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024fa:	2200      	movs	r2, #0
 80024fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002500:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002504:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002508:	f7fd feda 	bl	80002c0 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002516:	e064      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002518:	4b92      	ldr	r3, [pc, #584]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	2200      	movs	r2, #0
 8002520:	653b      	str	r3, [r7, #80]	@ 0x50
 8002522:	657a      	str	r2, [r7, #84]	@ 0x54
 8002524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800252c:	2300      	movs	r3, #0
 800252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002530:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002534:	4622      	mov	r2, r4
 8002536:	462b      	mov	r3, r5
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0159      	lsls	r1, r3, #5
 8002542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002546:	0150      	lsls	r0, r2, #5
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4621      	mov	r1, r4
 800254e:	1a51      	subs	r1, r2, r1
 8002550:	6139      	str	r1, [r7, #16]
 8002552:	4629      	mov	r1, r5
 8002554:	eb63 0301 	sbc.w	r3, r3, r1
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002566:	4659      	mov	r1, fp
 8002568:	018b      	lsls	r3, r1, #6
 800256a:	4651      	mov	r1, sl
 800256c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002570:	4651      	mov	r1, sl
 8002572:	018a      	lsls	r2, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ebb2 0801 	subs.w	r8, r2, r1
 800257a:	4659      	mov	r1, fp
 800257c:	eb63 0901 	sbc.w	r9, r3, r1
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002590:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002594:	4690      	mov	r8, r2
 8002596:	4699      	mov	r9, r3
 8002598:	4623      	mov	r3, r4
 800259a:	eb18 0303 	adds.w	r3, r8, r3
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	462b      	mov	r3, r5
 80025a2:	eb49 0303 	adc.w	r3, r9, r3
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025b4:	4629      	mov	r1, r5
 80025b6:	028b      	lsls	r3, r1, #10
 80025b8:	4621      	mov	r1, r4
 80025ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025be:	4621      	mov	r1, r4
 80025c0:	028a      	lsls	r2, r1, #10
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ca:	2200      	movs	r2, #0
 80025cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80025ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80025d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025d4:	f7fd fe74 	bl	80002c0 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4613      	mov	r3, r2
 80025de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e2:	4b60      	ldr	r3, [pc, #384]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0c1b      	lsrs	r3, r3, #16
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	3301      	adds	r3, #1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80025f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002604:	e0a6      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002606:	4b57      	ldr	r3, [pc, #348]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800260e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002612:	4b54      	ldr	r3, [pc, #336]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02a      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002628:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002630:	2100      	movs	r1, #0
 8002632:	4b4e      	ldr	r3, [pc, #312]	@ (800276c <HAL_RCC_GetSysClockFreq+0x350>)
 8002634:	fb03 f201 	mul.w	r2, r3, r1
 8002638:	2300      	movs	r3, #0
 800263a:	fb00 f303 	mul.w	r3, r0, r3
 800263e:	4413      	add	r3, r2
 8002640:	4a4a      	ldr	r2, [pc, #296]	@ (800276c <HAL_RCC_GetSysClockFreq+0x350>)
 8002642:	fba0 1202 	umull	r1, r2, r0, r2
 8002646:	677a      	str	r2, [r7, #116]	@ 0x74
 8002648:	460a      	mov	r2, r1
 800264a:	673a      	str	r2, [r7, #112]	@ 0x70
 800264c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800264e:	4413      	add	r3, r2
 8002650:	677b      	str	r3, [r7, #116]	@ 0x74
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002656:	2200      	movs	r2, #0
 8002658:	633b      	str	r3, [r7, #48]	@ 0x30
 800265a:	637a      	str	r2, [r7, #52]	@ 0x34
 800265c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002660:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002664:	f7fd fe2c 	bl	80002c0 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002672:	e05b      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
 800268c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4641      	mov	r1, r8
 80026aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c8:	ebb2 040a 	subs.w	r4, r2, sl
 80026cc:	eb63 050b 	sbc.w	r5, r3, fp
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	00eb      	lsls	r3, r5, #3
 80026da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	18e3      	adds	r3, r4, r3
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	464b      	mov	r3, r9
 80026ec:	eb45 0303 	adc.w	r3, r5, r3
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002714:	2200      	movs	r2, #0
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	61fa      	str	r2, [r7, #28]
 800271a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271e:	f7fd fdcf 	bl	80002c0 <__aeabi_uldivmod>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4613      	mov	r3, r2
 8002728:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800272c:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x348>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0f1b      	lsrs	r3, r3, #28
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800273a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800273e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800274a:	e003      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x34c>)
 800274e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002752:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002758:	4618      	mov	r0, r3
 800275a:	3798      	adds	r7, #152	@ 0x98
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	017d7840 	.word	0x017d7840

08002770 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e28d      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8083 	beq.w	8002896 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002790:	4b94      	ldr	r3, [pc, #592]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d019      	beq.n	80027d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800279c:	4b91      	ldr	r3, [pc, #580]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027a8:	4b8e      	ldr	r3, [pc, #568]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b8b      	ldr	r3, [pc, #556]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b84      	ldr	r3, [pc, #528]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x124>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e25a      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x90>
 80027f2:	4b7c      	ldr	r3, [pc, #496]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a7b      	ldr	r2, [pc, #492]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xcc>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xb4>
 800280a:	4b76      	ldr	r3, [pc, #472]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b73      	ldr	r3, [pc, #460]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a72      	ldr	r2, [pc, #456]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xcc>
 8002824:	4b6f      	ldr	r3, [pc, #444]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6e      	ldr	r2, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b6c      	ldr	r3, [pc, #432]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a6b      	ldr	r2, [pc, #428]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f94e 	bl	8001ae4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f94a 	bl	8001ae4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e21f      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xdc>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f93a 	bl	8001ae4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f936 	bl	8001ae4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e20b      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b57      	ldr	r3, [pc, #348]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x104>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d06f      	beq.n	8002982 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028a2:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d017      	beq.n	80028de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028ae:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028ba:	4b4a      	ldr	r3, [pc, #296]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b41      	ldr	r3, [pc, #260]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x186>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1d3      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4937      	ldr	r1, [pc, #220]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCC_OscConfig+0x278>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7ff f8e3 	bl	8001ae4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002922:	f7ff f8df 	bl	8001ae4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1b4      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4925      	ldr	r1, [pc, #148]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	@ (80029e8 <HAL_RCC_OscConfig+0x278>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7ff f8c2 	bl	8001ae4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002964:	f7ff f8be 	bl	8001ae4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e193      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d036      	beq.n	80029fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_RCC_OscConfig+0x27c>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7ff f8a2 	bl	8001ae4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7ff f89e 	bl	8001ae4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e173      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x234>
 80029c2:	e01b      	b.n	80029fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_OscConfig+0x27c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7ff f88b 	bl	8001ae4 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e00e      	b.n	80029f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7ff f887 	bl	8001ae4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d907      	bls.n	80029f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e15c      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	42470000 	.word	0x42470000
 80029ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b8a      	ldr	r3, [pc, #552]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ea      	bne.n	80029d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8097 	beq.w	8002b38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b83      	ldr	r3, [pc, #524]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	4a7e      	ldr	r2, [pc, #504]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b79      	ldr	r3, [pc, #484]	@ (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b76      	ldr	r3, [pc, #472]	@ (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a75      	ldr	r2, [pc, #468]	@ (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7ff f847 	bl	8001ae4 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7ff f843 	bl	8001ae4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e118      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c20 <HAL_RCC_OscConfig+0x4b0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x31e>
 8002a80:	4b66      	ldr	r3, [pc, #408]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a65      	ldr	r2, [pc, #404]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x358>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x340>
 8002a96:	4b61      	ldr	r3, [pc, #388]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	4a60      	ldr	r2, [pc, #384]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x358>
 8002ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	4a59      	ldr	r2, [pc, #356]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abc:	4b57      	ldr	r3, [pc, #348]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7ff f808 	bl	8001ae4 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7ff f804 	bl	8001ae4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0d7      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b4b      	ldr	r3, [pc, #300]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x368>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fff2 	bl	8001ae4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe ffee 	bl	8001ae4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0c1      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	4b40      	ldr	r3, [pc, #256]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	4a3a      	ldr	r2, [pc, #232]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80ad 	beq.w	8002c9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b42:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d060      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d145      	bne.n	8002be2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_RCC_OscConfig+0x4b4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe ffc2 	bl	8001ae4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe ffbe 	bl	8001ae4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e093      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b29      	ldr	r3, [pc, #164]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	491b      	ldr	r1, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x4b4>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe ff93 	bl	8001ae4 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe ff8f 	bl	8001ae4 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e064      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x452>
 8002be0:	e05c      	b.n	8002c9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_RCC_OscConfig+0x4b4>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe ff7c 	bl	8001ae4 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe ff78 	bl	8001ae4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04d      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x480>
 8002c0e:	e045      	b.n	8002c9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e040      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000
 8002c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <HAL_RCC_OscConfig+0x538>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d030      	beq.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d129      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d122      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d119      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	3b01      	subs	r3, #1
 8002c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d10f      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07b      	b.n	8002db6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cce:	d009      	beq.n	8002ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
 8002cd6:	e005      	b.n	8002ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fd46 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d68:	ea42 0103 	orr.w	r1, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0104 	and.w	r1, r3, #4
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	f003 0210 	and.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e042      	b.n	8002e56 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe fd1b 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2224      	movs	r2, #36	@ 0x24
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fcda 	bl	80037bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d112      	bne.n	8002e9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Receive_IT+0x26>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00b      	b.n	8002ea0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fab9 	bl	800340c <UART_Start_Receive_IT>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	e000      	b.n	8002ea0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0ba      	sub	sp, #232	@ 0xe8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_UART_IRQHandler+0x66>
 8002efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fb99 	bl	800363e <UART_Receive_IT>
      return;
 8002f0c:	e25b      	b.n	80033c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80de 	beq.w	80030d4 <HAL_UART_IRQHandler+0x22c>
 8002f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80d1 	beq.w	80030d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_UART_IRQHandler+0xae>
 8002f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_UART_IRQHandler+0xd2>
 8002f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f043 0202 	orr.w	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_UART_IRQHandler+0xf6>
 8002f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f043 0204 	orr.w	r2, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <HAL_UART_IRQHandler+0x126>
 8002faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f043 0208 	orr.w	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 81f2 	beq.w	80033bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x14e>
 8002fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fb24 	bl	800363e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003000:	2b40      	cmp	r3, #64	@ 0x40
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_UART_IRQHandler+0x17a>
 800301a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d04f      	beq.n	80030c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa2c 	bl	8003480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b40      	cmp	r3, #64	@ 0x40
 8003034:	d141      	bne.n	80030ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800304c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003062:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800306e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800307a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1d9      	bne.n	8003036 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d013      	beq.n	80030b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308e:	4a7e      	ldr	r2, [pc, #504]	@ (8003288 <HAL_UART_IRQHandler+0x3e0>)
 8003090:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fed5 	bl	8001e46 <HAL_DMA_Abort_IT>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030ac:	4610      	mov	r0, r2
 80030ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	e00e      	b.n	80030d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f994 	bl	80033e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	e00a      	b.n	80030d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f990 	bl	80033e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	e006      	b.n	80030d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f98c 	bl	80033e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030ce:	e175      	b.n	80033bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	bf00      	nop
    return;
 80030d2:	e173      	b.n	80033bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 814f 	bne.w	800337c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8148 	beq.w	800337c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8141 	beq.w	800337c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b40      	cmp	r3, #64	@ 0x40
 800311c:	f040 80b6 	bne.w	800328c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800312c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8145 	beq.w	80033c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800313a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800313e:	429a      	cmp	r2, r3
 8003140:	f080 813e 	bcs.w	80033c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800314a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003156:	f000 8088 	beq.w	800326a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003186:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800318a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003192:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800319e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1d9      	bne.n	800315a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80031b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3314      	adds	r3, #20
 80031c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e1      	bne.n	80031a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3314      	adds	r3, #20
 8003202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003208:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800320c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e3      	bne.n	80031e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800323a:	f023 0310 	bic.w	r3, r3, #16
 800323e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800324c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800324e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800325a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e3      	bne.n	8003228 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fd7e 	bl	8001d66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003278:	b29b      	uxth	r3, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	b29b      	uxth	r3, r3
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f8b7 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003286:	e09b      	b.n	80033c0 <HAL_UART_IRQHandler+0x518>
 8003288:	08003547 	.word	0x08003547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003294:	b29b      	uxth	r3, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 808e 	beq.w	80033c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80032a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8089 	beq.w	80033c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80032d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e3      	bne.n	80032b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	623b      	str	r3, [r7, #32]
   return(result);
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800330e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e3      	bne.n	80032ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0310 	bic.w	r3, r3, #16
 8003346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003354:	61fa      	str	r2, [r7, #28]
 8003356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	69b9      	ldr	r1, [r7, #24]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	617b      	str	r3, [r7, #20]
   return(result);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e3      	bne.n	8003330 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800336e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f83d 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800337a:	e023      	b.n	80033c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800337c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_UART_IRQHandler+0x4f4>
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8ea 	bl	800356e <UART_Transmit_IT>
    return;
 800339a:	e014      	b.n	80033c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800339c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <HAL_UART_IRQHandler+0x51e>
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f92a 	bl	800360e <UART_EndTransmit_IT>
    return;
 80033ba:	e004      	b.n	80033c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80033c4:	bf00      	nop
  }
}
 80033c6:	37e8      	adds	r7, #232	@ 0xe8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2222      	movs	r2, #34	@ 0x22
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003450:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0220 	orr.w	r2, r2, #32
 8003470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b095      	sub	sp, #84	@ 0x54
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3314      	adds	r3, #20
 80034da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e5      	bne.n	80034bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d119      	bne.n	800352c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60bb      	str	r3, [r7, #8]
   return(result);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0310 	bic.w	r3, r3, #16
 800350e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003518:	61ba      	str	r2, [r7, #24]
 800351a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	6979      	ldr	r1, [r7, #20]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	613b      	str	r3, [r7, #16]
   return(result);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800353a:	bf00      	nop
 800353c:	3754      	adds	r7, #84	@ 0x54
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff ff3d 	bl	80033e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b21      	cmp	r3, #33	@ 0x21
 8003580:	d13e      	bne.n	8003600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358a:	d114      	bne.n	80035b6 <UART_Transmit_IT+0x48>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d110      	bne.n	80035b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	e008      	b.n	80035c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6211      	str	r1, [r2, #32]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fecc 	bl	80033cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08c      	sub	sp, #48	@ 0x30
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b22      	cmp	r3, #34	@ 0x22
 8003650:	f040 80ae 	bne.w	80037b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365c:	d117      	bne.n	800368e <UART_Receive_IT+0x50>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367c:	b29a      	uxth	r2, r3
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28
 800368c:	e026      	b.n	80036dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a0:	d007      	beq.n	80036b2 <UART_Receive_IT+0x74>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <UART_Receive_IT+0x82>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e008      	b.n	80036d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4619      	mov	r1, r3
 80036ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d15d      	bne.n	80037ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0220 	bic.w	r2, r2, #32
 80036fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800370e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	2b01      	cmp	r3, #1
 8003734:	d135      	bne.n	80037a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	613b      	str	r3, [r7, #16]
   return(result);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375c:	623a      	str	r2, [r7, #32]
 800375e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	69f9      	ldr	r1, [r7, #28]
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	61bb      	str	r3, [r7, #24]
   return(result);
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b10      	cmp	r3, #16
 800377c:	d10a      	bne.n	8003794 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fe2a 	bl	80033f4 <HAL_UARTEx_RxEventCallback>
 80037a0:	e002      	b.n	80037a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd ffaa 	bl	80016fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e002      	b.n	80037b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3730      	adds	r7, #48	@ 0x30
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c0:	b0c0      	sub	sp, #256	@ 0x100
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	ea40 0301 	orr.w	r3, r0, r1
 80037e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003814:	f021 010c 	bic.w	r1, r1, #12
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003822:	430b      	orrs	r3, r1
 8003824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	6999      	ldr	r1, [r3, #24]
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	ea40 0301 	orr.w	r3, r0, r1
 8003842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b8f      	ldr	r3, [pc, #572]	@ (8003a88 <UART_SetConfig+0x2cc>)
 800384c:	429a      	cmp	r2, r3
 800384e:	d005      	beq.n	800385c <UART_SetConfig+0xa0>
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4b8d      	ldr	r3, [pc, #564]	@ (8003a8c <UART_SetConfig+0x2d0>)
 8003858:	429a      	cmp	r2, r3
 800385a:	d104      	bne.n	8003866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe fdca 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003864:	e003      	b.n	800386e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003866:	f7fe fdb1 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 800386a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003878:	f040 810c 	bne.w	8003a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800387c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800388a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	1891      	adds	r1, r2, r2
 8003894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003896:	415b      	adcs	r3, r3
 8003898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800389a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800389e:	4621      	mov	r1, r4
 80038a0:	eb12 0801 	adds.w	r8, r2, r1
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb43 0901 	adc.w	r9, r3, r1
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038be:	4690      	mov	r8, r2
 80038c0:	4699      	mov	r9, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	eb18 0303 	adds.w	r3, r8, r3
 80038c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038cc:	462b      	mov	r3, r5
 80038ce:	eb49 0303 	adc.w	r3, r9, r3
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ea:	460b      	mov	r3, r1
 80038ec:	18db      	adds	r3, r3, r3
 80038ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80038f0:	4613      	mov	r3, r2
 80038f2:	eb42 0303 	adc.w	r3, r2, r3
 80038f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80038f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003900:	f7fc fcde 	bl	80002c0 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4b61      	ldr	r3, [pc, #388]	@ (8003a90 <UART_SetConfig+0x2d4>)
 800390a:	fba3 2302 	umull	r2, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	011c      	lsls	r4, r3, #4
 8003912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800391c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003924:	4642      	mov	r2, r8
 8003926:	464b      	mov	r3, r9
 8003928:	1891      	adds	r1, r2, r2
 800392a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800392c:	415b      	adcs	r3, r3
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003934:	4641      	mov	r1, r8
 8003936:	eb12 0a01 	adds.w	sl, r2, r1
 800393a:	4649      	mov	r1, r9
 800393c:	eb43 0b01 	adc.w	fp, r3, r1
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800394c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003954:	4692      	mov	sl, r2
 8003956:	469b      	mov	fp, r3
 8003958:	4643      	mov	r3, r8
 800395a:	eb1a 0303 	adds.w	r3, sl, r3
 800395e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003962:	464b      	mov	r3, r9
 8003964:	eb4b 0303 	adc.w	r3, fp, r3
 8003968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800397c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003980:	460b      	mov	r3, r1
 8003982:	18db      	adds	r3, r3, r3
 8003984:	643b      	str	r3, [r7, #64]	@ 0x40
 8003986:	4613      	mov	r3, r2
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	647b      	str	r3, [r7, #68]	@ 0x44
 800398e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003996:	f7fc fc93 	bl	80002c0 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003a90 <UART_SetConfig+0x2d4>)
 80039a2:	fba3 2301 	umull	r2, r3, r3, r1
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2264      	movs	r2, #100	@ 0x64
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	1acb      	subs	r3, r1, r3
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039b6:	4b36      	ldr	r3, [pc, #216]	@ (8003a90 <UART_SetConfig+0x2d4>)
 80039b8:	fba3 2302 	umull	r2, r3, r3, r2
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039c4:	441c      	add	r4, r3
 80039c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039d8:	4642      	mov	r2, r8
 80039da:	464b      	mov	r3, r9
 80039dc:	1891      	adds	r1, r2, r2
 80039de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039e0:	415b      	adcs	r3, r3
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039e8:	4641      	mov	r1, r8
 80039ea:	1851      	adds	r1, r2, r1
 80039ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80039ee:	4649      	mov	r1, r9
 80039f0:	414b      	adcs	r3, r1
 80039f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a00:	4659      	mov	r1, fp
 8003a02:	00cb      	lsls	r3, r1, #3
 8003a04:	4651      	mov	r1, sl
 8003a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	00ca      	lsls	r2, r1, #3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	4642      	mov	r2, r8
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	460a      	mov	r2, r1
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	18db      	adds	r3, r3, r3
 8003a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a42:	4613      	mov	r3, r2
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a52:	f7fc fc35 	bl	80002c0 <__aeabi_uldivmod>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <UART_SetConfig+0x2d4>)
 8003a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	2164      	movs	r1, #100	@ 0x64
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	3332      	adds	r3, #50	@ 0x32
 8003a6e:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <UART_SetConfig+0x2d4>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4422      	add	r2, r4
 8003a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a84:	e106      	b.n	8003c94 <UART_SetConfig+0x4d8>
 8003a86:	bf00      	nop
 8003a88:	40011000 	.word	0x40011000
 8003a8c:	40011400 	.word	0x40011400
 8003a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	6239      	str	r1, [r7, #32]
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	1854      	adds	r4, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb43 0501 	adc.w	r5, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	00eb      	lsls	r3, r5, #3
 8003aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ace:	00e2      	lsls	r2, r4, #3
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	18e3      	adds	r3, r4, r3
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003adc:	464b      	mov	r3, r9
 8003ade:	eb45 0303 	adc.w	r3, r5, r3
 8003ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b02:	4629      	mov	r1, r5
 8003b04:	008b      	lsls	r3, r1, #2
 8003b06:	4621      	mov	r1, r4
 8003b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	008a      	lsls	r2, r1, #2
 8003b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b14:	f7fc fbd4 	bl	80002c0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	011c      	lsls	r4, r3, #4
 8003b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	61b9      	str	r1, [r7, #24]
 8003b40:	415b      	adcs	r3, r3
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b48:	4641      	mov	r1, r8
 8003b4a:	1851      	adds	r1, r2, r1
 8003b4c:	6139      	str	r1, [r7, #16]
 8003b4e:	4649      	mov	r1, r9
 8003b50:	414b      	adcs	r3, r1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b60:	4659      	mov	r1, fp
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4642      	mov	r2, r8
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	460a      	mov	r2, r1
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	008b      	lsls	r3, r1, #2
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003baa:	4641      	mov	r1, r8
 8003bac:	008a      	lsls	r2, r1, #2
 8003bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bb2:	f7fc fb85 	bl	80002c0 <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2264      	movs	r2, #100	@ 0x64
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	1acb      	subs	r3, r1, r3
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	3332      	adds	r3, #50	@ 0x32
 8003bd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bdc:	441c      	add	r4, r3
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be2:	2200      	movs	r2, #0
 8003be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	1851      	adds	r1, r2, r1
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	4649      	mov	r1, r9
 8003c04:	414b      	adcs	r3, r1
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c14:	4659      	mov	r1, fp
 8003c16:	00cb      	lsls	r3, r1, #3
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1e:	4651      	mov	r1, sl
 8003c20:	00ca      	lsls	r2, r1, #3
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	4642      	mov	r2, r8
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c2e:	464b      	mov	r3, r9
 8003c30:	460a      	mov	r2, r1
 8003c32:	eb42 0303 	adc.w	r3, r2, r3
 8003c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c50:	4649      	mov	r1, r9
 8003c52:	008b      	lsls	r3, r1, #2
 8003c54:	4641      	mov	r1, r8
 8003c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	008a      	lsls	r2, r1, #2
 8003c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c62:	f7fc fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	@ 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	3332      	adds	r3, #50	@ 0x32
 8003c7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ca0 <UART_SetConfig+0x4e4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4422      	add	r2, r4
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca0:	51eb851f 	.word	0x51eb851f

08003ca4 <siprintf>:
 8003ca4:	b40e      	push	{r1, r2, r3}
 8003ca6:	b500      	push	{lr}
 8003ca8:	b09c      	sub	sp, #112	@ 0x70
 8003caa:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cac:	9002      	str	r0, [sp, #8]
 8003cae:	9006      	str	r0, [sp, #24]
 8003cb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cb4:	4809      	ldr	r0, [pc, #36]	@ (8003cdc <siprintf+0x38>)
 8003cb6:	9107      	str	r1, [sp, #28]
 8003cb8:	9104      	str	r1, [sp, #16]
 8003cba:	4909      	ldr	r1, [pc, #36]	@ (8003ce0 <siprintf+0x3c>)
 8003cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc0:	9105      	str	r1, [sp, #20]
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	a902      	add	r1, sp, #8
 8003cc8:	f000 f994 	bl	8003ff4 <_svfiprintf_r>
 8003ccc:	9b02      	ldr	r3, [sp, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	b01c      	add	sp, #112	@ 0x70
 8003cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd8:	b003      	add	sp, #12
 8003cda:	4770      	bx	lr
 8003cdc:	20000038 	.word	0x20000038
 8003ce0:	ffff0208 	.word	0xffff0208

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <__errno>:
 8003cf4:	4b01      	ldr	r3, [pc, #4]	@ (8003cfc <__errno+0x8>)
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000038 	.word	0x20000038

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4d0d      	ldr	r5, [pc, #52]	@ (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	@ (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4d0b      	ldr	r5, [pc, #44]	@ (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	@ (8003d44 <__libc_init_array+0x44>)
 8003d14:	f000 fc66 	bl	80045e4 <_init>
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	0800713c 	.word	0x0800713c
 8003d3c:	0800713c 	.word	0x0800713c
 8003d40:	0800713c 	.word	0x0800713c
 8003d44:	08007140 	.word	0x08007140

08003d48 <__retarget_lock_acquire_recursive>:
 8003d48:	4770      	bx	lr

08003d4a <__retarget_lock_release_recursive>:
 8003d4a:	4770      	bx	lr

08003d4c <_free_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4605      	mov	r5, r0
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d041      	beq.n	8003dd8 <_free_r+0x8c>
 8003d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d58:	1f0c      	subs	r4, r1, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	18e4      	addlt	r4, r4, r3
 8003d60:	f000 f8e0 	bl	8003f24 <__malloc_lock>
 8003d64:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <_free_r+0x90>)
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	b933      	cbnz	r3, 8003d78 <_free_r+0x2c>
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	6014      	str	r4, [r2, #0]
 8003d6e:	4628      	mov	r0, r5
 8003d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d74:	f000 b8dc 	b.w	8003f30 <__malloc_unlock>
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d908      	bls.n	8003d8e <_free_r+0x42>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf01      	itttt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	1809      	addeq	r1, r1, r0
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	e7ed      	b.n	8003d6a <_free_r+0x1e>
 8003d8e:	461a      	mov	r2, r3
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b10b      	cbz	r3, 8003d98 <_free_r+0x4c>
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	d9fa      	bls.n	8003d8e <_free_r+0x42>
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	1850      	adds	r0, r2, r1
 8003d9c:	42a0      	cmp	r0, r4
 8003d9e:	d10b      	bne.n	8003db8 <_free_r+0x6c>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	4401      	add	r1, r0
 8003da4:	1850      	adds	r0, r2, r1
 8003da6:	4283      	cmp	r3, r0
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	d1e0      	bne.n	8003d6e <_free_r+0x22>
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	6053      	str	r3, [r2, #4]
 8003db2:	4408      	add	r0, r1
 8003db4:	6010      	str	r0, [r2, #0]
 8003db6:	e7da      	b.n	8003d6e <_free_r+0x22>
 8003db8:	d902      	bls.n	8003dc0 <_free_r+0x74>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	e7d6      	b.n	8003d6e <_free_r+0x22>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	bf04      	itt	eq
 8003dc8:	6819      	ldreq	r1, [r3, #0]
 8003dca:	685b      	ldreq	r3, [r3, #4]
 8003dcc:	6063      	str	r3, [r4, #4]
 8003dce:	bf04      	itt	eq
 8003dd0:	1809      	addeq	r1, r1, r0
 8003dd2:	6021      	streq	r1, [r4, #0]
 8003dd4:	6054      	str	r4, [r2, #4]
 8003dd6:	e7ca      	b.n	8003d6e <_free_r+0x22>
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
 8003dda:	bf00      	nop
 8003ddc:	200002ac 	.word	0x200002ac

08003de0 <sbrk_aligned>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e20 <sbrk_aligned+0x40>)
 8003de4:	460c      	mov	r4, r1
 8003de6:	6831      	ldr	r1, [r6, #0]
 8003de8:	4605      	mov	r5, r0
 8003dea:	b911      	cbnz	r1, 8003df2 <sbrk_aligned+0x12>
 8003dec:	f000 fba6 	bl	800453c <_sbrk_r>
 8003df0:	6030      	str	r0, [r6, #0]
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fba1 	bl	800453c <_sbrk_r>
 8003dfa:	1c43      	adds	r3, r0, #1
 8003dfc:	d103      	bne.n	8003e06 <sbrk_aligned+0x26>
 8003dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8003e02:	4620      	mov	r0, r4
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	1cc4      	adds	r4, r0, #3
 8003e08:	f024 0403 	bic.w	r4, r4, #3
 8003e0c:	42a0      	cmp	r0, r4
 8003e0e:	d0f8      	beq.n	8003e02 <sbrk_aligned+0x22>
 8003e10:	1a21      	subs	r1, r4, r0
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fb92 	bl	800453c <_sbrk_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d1f2      	bne.n	8003e02 <sbrk_aligned+0x22>
 8003e1c:	e7ef      	b.n	8003dfe <sbrk_aligned+0x1e>
 8003e1e:	bf00      	nop
 8003e20:	200002a8 	.word	0x200002a8

08003e24 <_malloc_r>:
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	1ccd      	adds	r5, r1, #3
 8003e2a:	f025 0503 	bic.w	r5, r5, #3
 8003e2e:	3508      	adds	r5, #8
 8003e30:	2d0c      	cmp	r5, #12
 8003e32:	bf38      	it	cc
 8003e34:	250c      	movcc	r5, #12
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	4606      	mov	r6, r0
 8003e3a:	db01      	blt.n	8003e40 <_malloc_r+0x1c>
 8003e3c:	42a9      	cmp	r1, r5
 8003e3e:	d904      	bls.n	8003e4a <_malloc_r+0x26>
 8003e40:	230c      	movs	r3, #12
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	2000      	movs	r0, #0
 8003e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f20 <_malloc_r+0xfc>
 8003e4e:	f000 f869 	bl	8003f24 <__malloc_lock>
 8003e52:	f8d8 3000 	ldr.w	r3, [r8]
 8003e56:	461c      	mov	r4, r3
 8003e58:	bb44      	cbnz	r4, 8003eac <_malloc_r+0x88>
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7ff ffbf 	bl	8003de0 <sbrk_aligned>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	4604      	mov	r4, r0
 8003e66:	d158      	bne.n	8003f1a <_malloc_r+0xf6>
 8003e68:	f8d8 4000 	ldr.w	r4, [r8]
 8003e6c:	4627      	mov	r7, r4
 8003e6e:	2f00      	cmp	r7, #0
 8003e70:	d143      	bne.n	8003efa <_malloc_r+0xd6>
 8003e72:	2c00      	cmp	r4, #0
 8003e74:	d04b      	beq.n	8003f0e <_malloc_r+0xea>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	4639      	mov	r1, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	eb04 0903 	add.w	r9, r4, r3
 8003e80:	f000 fb5c 	bl	800453c <_sbrk_r>
 8003e84:	4581      	cmp	r9, r0
 8003e86:	d142      	bne.n	8003f0e <_malloc_r+0xea>
 8003e88:	6821      	ldr	r1, [r4, #0]
 8003e8a:	1a6d      	subs	r5, r5, r1
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4630      	mov	r0, r6
 8003e90:	f7ff ffa6 	bl	8003de0 <sbrk_aligned>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d03a      	beq.n	8003f0e <_malloc_r+0xea>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	442b      	add	r3, r5
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	bb62      	cbnz	r2, 8003f00 <_malloc_r+0xdc>
 8003ea6:	f8c8 7000 	str.w	r7, [r8]
 8003eaa:	e00f      	b.n	8003ecc <_malloc_r+0xa8>
 8003eac:	6822      	ldr	r2, [r4, #0]
 8003eae:	1b52      	subs	r2, r2, r5
 8003eb0:	d420      	bmi.n	8003ef4 <_malloc_r+0xd0>
 8003eb2:	2a0b      	cmp	r2, #11
 8003eb4:	d917      	bls.n	8003ee6 <_malloc_r+0xc2>
 8003eb6:	1961      	adds	r1, r4, r5
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	6025      	str	r5, [r4, #0]
 8003ebc:	bf18      	it	ne
 8003ebe:	6059      	strne	r1, [r3, #4]
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	bf08      	it	eq
 8003ec4:	f8c8 1000 	streq.w	r1, [r8]
 8003ec8:	5162      	str	r2, [r4, r5]
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f000 f82f 	bl	8003f30 <__malloc_unlock>
 8003ed2:	f104 000b 	add.w	r0, r4, #11
 8003ed6:	1d23      	adds	r3, r4, #4
 8003ed8:	f020 0007 	bic.w	r0, r0, #7
 8003edc:	1ac2      	subs	r2, r0, r3
 8003ede:	bf1c      	itt	ne
 8003ee0:	1a1b      	subne	r3, r3, r0
 8003ee2:	50a3      	strne	r3, [r4, r2]
 8003ee4:	e7af      	b.n	8003e46 <_malloc_r+0x22>
 8003ee6:	6862      	ldr	r2, [r4, #4]
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	bf0c      	ite	eq
 8003eec:	f8c8 2000 	streq.w	r2, [r8]
 8003ef0:	605a      	strne	r2, [r3, #4]
 8003ef2:	e7eb      	b.n	8003ecc <_malloc_r+0xa8>
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	6864      	ldr	r4, [r4, #4]
 8003ef8:	e7ae      	b.n	8003e58 <_malloc_r+0x34>
 8003efa:	463c      	mov	r4, r7
 8003efc:	687f      	ldr	r7, [r7, #4]
 8003efe:	e7b6      	b.n	8003e6e <_malloc_r+0x4a>
 8003f00:	461a      	mov	r2, r3
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	d1fb      	bne.n	8003f00 <_malloc_r+0xdc>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6053      	str	r3, [r2, #4]
 8003f0c:	e7de      	b.n	8003ecc <_malloc_r+0xa8>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	4630      	mov	r0, r6
 8003f14:	f000 f80c 	bl	8003f30 <__malloc_unlock>
 8003f18:	e794      	b.n	8003e44 <_malloc_r+0x20>
 8003f1a:	6005      	str	r5, [r0, #0]
 8003f1c:	e7d6      	b.n	8003ecc <_malloc_r+0xa8>
 8003f1e:	bf00      	nop
 8003f20:	200002ac 	.word	0x200002ac

08003f24 <__malloc_lock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	@ (8003f2c <__malloc_lock+0x8>)
 8003f26:	f7ff bf0f 	b.w	8003d48 <__retarget_lock_acquire_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	200002a4 	.word	0x200002a4

08003f30 <__malloc_unlock>:
 8003f30:	4801      	ldr	r0, [pc, #4]	@ (8003f38 <__malloc_unlock+0x8>)
 8003f32:	f7ff bf0a 	b.w	8003d4a <__retarget_lock_release_recursive>
 8003f36:	bf00      	nop
 8003f38:	200002a4 	.word	0x200002a4

08003f3c <__ssputs_r>:
 8003f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f40:	688e      	ldr	r6, [r1, #8]
 8003f42:	461f      	mov	r7, r3
 8003f44:	42be      	cmp	r6, r7
 8003f46:	680b      	ldr	r3, [r1, #0]
 8003f48:	4682      	mov	sl, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4690      	mov	r8, r2
 8003f4e:	d82d      	bhi.n	8003fac <__ssputs_r+0x70>
 8003f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f58:	d026      	beq.n	8003fa8 <__ssputs_r+0x6c>
 8003f5a:	6965      	ldr	r5, [r4, #20]
 8003f5c:	6909      	ldr	r1, [r1, #16]
 8003f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f62:	eba3 0901 	sub.w	r9, r3, r1
 8003f66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f6a:	1c7b      	adds	r3, r7, #1
 8003f6c:	444b      	add	r3, r9
 8003f6e:	106d      	asrs	r5, r5, #1
 8003f70:	429d      	cmp	r5, r3
 8003f72:	bf38      	it	cc
 8003f74:	461d      	movcc	r5, r3
 8003f76:	0553      	lsls	r3, r2, #21
 8003f78:	d527      	bpl.n	8003fca <__ssputs_r+0x8e>
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7ff ff52 	bl	8003e24 <_malloc_r>
 8003f80:	4606      	mov	r6, r0
 8003f82:	b360      	cbz	r0, 8003fde <__ssputs_r+0xa2>
 8003f84:	6921      	ldr	r1, [r4, #16]
 8003f86:	464a      	mov	r2, r9
 8003f88:	f000 fae8 	bl	800455c <memcpy>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	6126      	str	r6, [r4, #16]
 8003f9a:	6165      	str	r5, [r4, #20]
 8003f9c:	444e      	add	r6, r9
 8003f9e:	eba5 0509 	sub.w	r5, r5, r9
 8003fa2:	6026      	str	r6, [r4, #0]
 8003fa4:	60a5      	str	r5, [r4, #8]
 8003fa6:	463e      	mov	r6, r7
 8003fa8:	42be      	cmp	r6, r7
 8003faa:	d900      	bls.n	8003fae <__ssputs_r+0x72>
 8003fac:	463e      	mov	r6, r7
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	4632      	mov	r2, r6
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	f000 faa8 	bl	8004508 <memmove>
 8003fb8:	68a3      	ldr	r3, [r4, #8]
 8003fba:	1b9b      	subs	r3, r3, r6
 8003fbc:	60a3      	str	r3, [r4, #8]
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	4433      	add	r3, r6
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fca:	462a      	mov	r2, r5
 8003fcc:	f000 fad4 	bl	8004578 <_realloc_r>
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1e0      	bne.n	8003f98 <__ssputs_r+0x5c>
 8003fd6:	6921      	ldr	r1, [r4, #16]
 8003fd8:	4650      	mov	r0, sl
 8003fda:	f7ff feb7 	bl	8003d4c <_free_r>
 8003fde:	230c      	movs	r3, #12
 8003fe0:	f8ca 3000 	str.w	r3, [sl]
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e7e9      	b.n	8003fc6 <__ssputs_r+0x8a>
	...

08003ff4 <_svfiprintf_r>:
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	4698      	mov	r8, r3
 8003ffa:	898b      	ldrh	r3, [r1, #12]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	b09d      	sub	sp, #116	@ 0x74
 8004000:	4607      	mov	r7, r0
 8004002:	460d      	mov	r5, r1
 8004004:	4614      	mov	r4, r2
 8004006:	d510      	bpl.n	800402a <_svfiprintf_r+0x36>
 8004008:	690b      	ldr	r3, [r1, #16]
 800400a:	b973      	cbnz	r3, 800402a <_svfiprintf_r+0x36>
 800400c:	2140      	movs	r1, #64	@ 0x40
 800400e:	f7ff ff09 	bl	8003e24 <_malloc_r>
 8004012:	6028      	str	r0, [r5, #0]
 8004014:	6128      	str	r0, [r5, #16]
 8004016:	b930      	cbnz	r0, 8004026 <_svfiprintf_r+0x32>
 8004018:	230c      	movs	r3, #12
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	b01d      	add	sp, #116	@ 0x74
 8004022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004026:	2340      	movs	r3, #64	@ 0x40
 8004028:	616b      	str	r3, [r5, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	9309      	str	r3, [sp, #36]	@ 0x24
 800402e:	2320      	movs	r3, #32
 8004030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004034:	f8cd 800c 	str.w	r8, [sp, #12]
 8004038:	2330      	movs	r3, #48	@ 0x30
 800403a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041d8 <_svfiprintf_r+0x1e4>
 800403e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004042:	f04f 0901 	mov.w	r9, #1
 8004046:	4623      	mov	r3, r4
 8004048:	469a      	mov	sl, r3
 800404a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404e:	b10a      	cbz	r2, 8004054 <_svfiprintf_r+0x60>
 8004050:	2a25      	cmp	r2, #37	@ 0x25
 8004052:	d1f9      	bne.n	8004048 <_svfiprintf_r+0x54>
 8004054:	ebba 0b04 	subs.w	fp, sl, r4
 8004058:	d00b      	beq.n	8004072 <_svfiprintf_r+0x7e>
 800405a:	465b      	mov	r3, fp
 800405c:	4622      	mov	r2, r4
 800405e:	4629      	mov	r1, r5
 8004060:	4638      	mov	r0, r7
 8004062:	f7ff ff6b 	bl	8003f3c <__ssputs_r>
 8004066:	3001      	adds	r0, #1
 8004068:	f000 80a7 	beq.w	80041ba <_svfiprintf_r+0x1c6>
 800406c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800406e:	445a      	add	r2, fp
 8004070:	9209      	str	r2, [sp, #36]	@ 0x24
 8004072:	f89a 3000 	ldrb.w	r3, [sl]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 809f 	beq.w	80041ba <_svfiprintf_r+0x1c6>
 800407c:	2300      	movs	r3, #0
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004086:	f10a 0a01 	add.w	sl, sl, #1
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	9307      	str	r3, [sp, #28]
 800408e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004092:	931a      	str	r3, [sp, #104]	@ 0x68
 8004094:	4654      	mov	r4, sl
 8004096:	2205      	movs	r2, #5
 8004098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409c:	484e      	ldr	r0, [pc, #312]	@ (80041d8 <_svfiprintf_r+0x1e4>)
 800409e:	f7fc f8bf 	bl	8000220 <memchr>
 80040a2:	9a04      	ldr	r2, [sp, #16]
 80040a4:	b9d8      	cbnz	r0, 80040de <_svfiprintf_r+0xea>
 80040a6:	06d0      	lsls	r0, r2, #27
 80040a8:	bf44      	itt	mi
 80040aa:	2320      	movmi	r3, #32
 80040ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040b0:	0711      	lsls	r1, r2, #28
 80040b2:	bf44      	itt	mi
 80040b4:	232b      	movmi	r3, #43	@ 0x2b
 80040b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ba:	f89a 3000 	ldrb.w	r3, [sl]
 80040be:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c0:	d015      	beq.n	80040ee <_svfiprintf_r+0xfa>
 80040c2:	9a07      	ldr	r2, [sp, #28]
 80040c4:	4654      	mov	r4, sl
 80040c6:	2000      	movs	r0, #0
 80040c8:	f04f 0c0a 	mov.w	ip, #10
 80040cc:	4621      	mov	r1, r4
 80040ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d2:	3b30      	subs	r3, #48	@ 0x30
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d94b      	bls.n	8004170 <_svfiprintf_r+0x17c>
 80040d8:	b1b0      	cbz	r0, 8004108 <_svfiprintf_r+0x114>
 80040da:	9207      	str	r2, [sp, #28]
 80040dc:	e014      	b.n	8004108 <_svfiprintf_r+0x114>
 80040de:	eba0 0308 	sub.w	r3, r0, r8
 80040e2:	fa09 f303 	lsl.w	r3, r9, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	46a2      	mov	sl, r4
 80040ec:	e7d2      	b.n	8004094 <_svfiprintf_r+0xa0>
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	1d19      	adds	r1, r3, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	9103      	str	r1, [sp, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bfbb      	ittet	lt
 80040fa:	425b      	neglt	r3, r3
 80040fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004100:	9307      	strge	r3, [sp, #28]
 8004102:	9307      	strlt	r3, [sp, #28]
 8004104:	bfb8      	it	lt
 8004106:	9204      	strlt	r2, [sp, #16]
 8004108:	7823      	ldrb	r3, [r4, #0]
 800410a:	2b2e      	cmp	r3, #46	@ 0x2e
 800410c:	d10a      	bne.n	8004124 <_svfiprintf_r+0x130>
 800410e:	7863      	ldrb	r3, [r4, #1]
 8004110:	2b2a      	cmp	r3, #42	@ 0x2a
 8004112:	d132      	bne.n	800417a <_svfiprintf_r+0x186>
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	9203      	str	r2, [sp, #12]
 800411c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004120:	3402      	adds	r4, #2
 8004122:	9305      	str	r3, [sp, #20]
 8004124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041e8 <_svfiprintf_r+0x1f4>
 8004128:	7821      	ldrb	r1, [r4, #0]
 800412a:	2203      	movs	r2, #3
 800412c:	4650      	mov	r0, sl
 800412e:	f7fc f877 	bl	8000220 <memchr>
 8004132:	b138      	cbz	r0, 8004144 <_svfiprintf_r+0x150>
 8004134:	9b04      	ldr	r3, [sp, #16]
 8004136:	eba0 000a 	sub.w	r0, r0, sl
 800413a:	2240      	movs	r2, #64	@ 0x40
 800413c:	4082      	lsls	r2, r0
 800413e:	4313      	orrs	r3, r2
 8004140:	3401      	adds	r4, #1
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	4824      	ldr	r0, [pc, #144]	@ (80041dc <_svfiprintf_r+0x1e8>)
 800414a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800414e:	2206      	movs	r2, #6
 8004150:	f7fc f866 	bl	8000220 <memchr>
 8004154:	2800      	cmp	r0, #0
 8004156:	d036      	beq.n	80041c6 <_svfiprintf_r+0x1d2>
 8004158:	4b21      	ldr	r3, [pc, #132]	@ (80041e0 <_svfiprintf_r+0x1ec>)
 800415a:	bb1b      	cbnz	r3, 80041a4 <_svfiprintf_r+0x1b0>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	3307      	adds	r3, #7
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	3308      	adds	r3, #8
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800416a:	4433      	add	r3, r6
 800416c:	9309      	str	r3, [sp, #36]	@ 0x24
 800416e:	e76a      	b.n	8004046 <_svfiprintf_r+0x52>
 8004170:	fb0c 3202 	mla	r2, ip, r2, r3
 8004174:	460c      	mov	r4, r1
 8004176:	2001      	movs	r0, #1
 8004178:	e7a8      	b.n	80040cc <_svfiprintf_r+0xd8>
 800417a:	2300      	movs	r3, #0
 800417c:	3401      	adds	r4, #1
 800417e:	9305      	str	r3, [sp, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 0c0a 	mov.w	ip, #10
 8004186:	4620      	mov	r0, r4
 8004188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800418c:	3a30      	subs	r2, #48	@ 0x30
 800418e:	2a09      	cmp	r2, #9
 8004190:	d903      	bls.n	800419a <_svfiprintf_r+0x1a6>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0c6      	beq.n	8004124 <_svfiprintf_r+0x130>
 8004196:	9105      	str	r1, [sp, #20]
 8004198:	e7c4      	b.n	8004124 <_svfiprintf_r+0x130>
 800419a:	fb0c 2101 	mla	r1, ip, r1, r2
 800419e:	4604      	mov	r4, r0
 80041a0:	2301      	movs	r3, #1
 80041a2:	e7f0      	b.n	8004186 <_svfiprintf_r+0x192>
 80041a4:	ab03      	add	r3, sp, #12
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	462a      	mov	r2, r5
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <_svfiprintf_r+0x1f0>)
 80041ac:	a904      	add	r1, sp, #16
 80041ae:	4638      	mov	r0, r7
 80041b0:	f3af 8000 	nop.w
 80041b4:	1c42      	adds	r2, r0, #1
 80041b6:	4606      	mov	r6, r0
 80041b8:	d1d6      	bne.n	8004168 <_svfiprintf_r+0x174>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	065b      	lsls	r3, r3, #25
 80041be:	f53f af2d 	bmi.w	800401c <_svfiprintf_r+0x28>
 80041c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041c4:	e72c      	b.n	8004020 <_svfiprintf_r+0x2c>
 80041c6:	ab03      	add	r3, sp, #12
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	462a      	mov	r2, r5
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <_svfiprintf_r+0x1f0>)
 80041ce:	a904      	add	r1, sp, #16
 80041d0:	4638      	mov	r0, r7
 80041d2:	f000 f879 	bl	80042c8 <_printf_i>
 80041d6:	e7ed      	b.n	80041b4 <_svfiprintf_r+0x1c0>
 80041d8:	08007100 	.word	0x08007100
 80041dc:	0800710a 	.word	0x0800710a
 80041e0:	00000000 	.word	0x00000000
 80041e4:	08003f3d 	.word	0x08003f3d
 80041e8:	08007106 	.word	0x08007106

080041ec <_printf_common>:
 80041ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	4616      	mov	r6, r2
 80041f2:	4698      	mov	r8, r3
 80041f4:	688a      	ldr	r2, [r1, #8]
 80041f6:	690b      	ldr	r3, [r1, #16]
 80041f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bfb8      	it	lt
 8004200:	4613      	movlt	r3, r2
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004208:	4607      	mov	r7, r0
 800420a:	460c      	mov	r4, r1
 800420c:	b10a      	cbz	r2, 8004212 <_printf_common+0x26>
 800420e:	3301      	adds	r3, #1
 8004210:	6033      	str	r3, [r6, #0]
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	0699      	lsls	r1, r3, #26
 8004216:	bf42      	ittt	mi
 8004218:	6833      	ldrmi	r3, [r6, #0]
 800421a:	3302      	addmi	r3, #2
 800421c:	6033      	strmi	r3, [r6, #0]
 800421e:	6825      	ldr	r5, [r4, #0]
 8004220:	f015 0506 	ands.w	r5, r5, #6
 8004224:	d106      	bne.n	8004234 <_printf_common+0x48>
 8004226:	f104 0a19 	add.w	sl, r4, #25
 800422a:	68e3      	ldr	r3, [r4, #12]
 800422c:	6832      	ldr	r2, [r6, #0]
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	42ab      	cmp	r3, r5
 8004232:	dc26      	bgt.n	8004282 <_printf_common+0x96>
 8004234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	3b00      	subs	r3, #0
 800423c:	bf18      	it	ne
 800423e:	2301      	movne	r3, #1
 8004240:	0692      	lsls	r2, r2, #26
 8004242:	d42b      	bmi.n	800429c <_printf_common+0xb0>
 8004244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004248:	4641      	mov	r1, r8
 800424a:	4638      	mov	r0, r7
 800424c:	47c8      	blx	r9
 800424e:	3001      	adds	r0, #1
 8004250:	d01e      	beq.n	8004290 <_printf_common+0xa4>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	6922      	ldr	r2, [r4, #16]
 8004256:	f003 0306 	and.w	r3, r3, #6
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf02      	ittt	eq
 800425e:	68e5      	ldreq	r5, [r4, #12]
 8004260:	6833      	ldreq	r3, [r6, #0]
 8004262:	1aed      	subeq	r5, r5, r3
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	bf0c      	ite	eq
 8004268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800426c:	2500      	movne	r5, #0
 800426e:	4293      	cmp	r3, r2
 8004270:	bfc4      	itt	gt
 8004272:	1a9b      	subgt	r3, r3, r2
 8004274:	18ed      	addgt	r5, r5, r3
 8004276:	2600      	movs	r6, #0
 8004278:	341a      	adds	r4, #26
 800427a:	42b5      	cmp	r5, r6
 800427c:	d11a      	bne.n	80042b4 <_printf_common+0xc8>
 800427e:	2000      	movs	r0, #0
 8004280:	e008      	b.n	8004294 <_printf_common+0xa8>
 8004282:	2301      	movs	r3, #1
 8004284:	4652      	mov	r2, sl
 8004286:	4641      	mov	r1, r8
 8004288:	4638      	mov	r0, r7
 800428a:	47c8      	blx	r9
 800428c:	3001      	adds	r0, #1
 800428e:	d103      	bne.n	8004298 <_printf_common+0xac>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004298:	3501      	adds	r5, #1
 800429a:	e7c6      	b.n	800422a <_printf_common+0x3e>
 800429c:	18e1      	adds	r1, r4, r3
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	2030      	movs	r0, #48	@ 0x30
 80042a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042a6:	4422      	add	r2, r4
 80042a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042b0:	3302      	adds	r3, #2
 80042b2:	e7c7      	b.n	8004244 <_printf_common+0x58>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4622      	mov	r2, r4
 80042b8:	4641      	mov	r1, r8
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c8      	blx	r9
 80042be:	3001      	adds	r0, #1
 80042c0:	d0e6      	beq.n	8004290 <_printf_common+0xa4>
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7d9      	b.n	800427a <_printf_common+0x8e>
	...

080042c8 <_printf_i>:
 80042c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	7e0f      	ldrb	r7, [r1, #24]
 80042ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042d0:	2f78      	cmp	r7, #120	@ 0x78
 80042d2:	4691      	mov	r9, r2
 80042d4:	4680      	mov	r8, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	469a      	mov	sl, r3
 80042da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042de:	d807      	bhi.n	80042f0 <_printf_i+0x28>
 80042e0:	2f62      	cmp	r7, #98	@ 0x62
 80042e2:	d80a      	bhi.n	80042fa <_printf_i+0x32>
 80042e4:	2f00      	cmp	r7, #0
 80042e6:	f000 80d2 	beq.w	800448e <_printf_i+0x1c6>
 80042ea:	2f58      	cmp	r7, #88	@ 0x58
 80042ec:	f000 80b9 	beq.w	8004462 <_printf_i+0x19a>
 80042f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042f8:	e03a      	b.n	8004370 <_printf_i+0xa8>
 80042fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042fe:	2b15      	cmp	r3, #21
 8004300:	d8f6      	bhi.n	80042f0 <_printf_i+0x28>
 8004302:	a101      	add	r1, pc, #4	@ (adr r1, 8004308 <_printf_i+0x40>)
 8004304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004308:	08004361 	.word	0x08004361
 800430c:	08004375 	.word	0x08004375
 8004310:	080042f1 	.word	0x080042f1
 8004314:	080042f1 	.word	0x080042f1
 8004318:	080042f1 	.word	0x080042f1
 800431c:	080042f1 	.word	0x080042f1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042f1 	.word	0x080042f1
 8004328:	080042f1 	.word	0x080042f1
 800432c:	080042f1 	.word	0x080042f1
 8004330:	080042f1 	.word	0x080042f1
 8004334:	08004475 	.word	0x08004475
 8004338:	0800439f 	.word	0x0800439f
 800433c:	0800442f 	.word	0x0800442f
 8004340:	080042f1 	.word	0x080042f1
 8004344:	080042f1 	.word	0x080042f1
 8004348:	08004497 	.word	0x08004497
 800434c:	080042f1 	.word	0x080042f1
 8004350:	0800439f 	.word	0x0800439f
 8004354:	080042f1 	.word	0x080042f1
 8004358:	080042f1 	.word	0x080042f1
 800435c:	08004437 	.word	0x08004437
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6032      	str	r2, [r6, #0]
 8004368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800436c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004370:	2301      	movs	r3, #1
 8004372:	e09d      	b.n	80044b0 <_printf_i+0x1e8>
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	1d19      	adds	r1, r3, #4
 800437a:	6031      	str	r1, [r6, #0]
 800437c:	0606      	lsls	r6, r0, #24
 800437e:	d501      	bpl.n	8004384 <_printf_i+0xbc>
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	e003      	b.n	800438c <_printf_i+0xc4>
 8004384:	0645      	lsls	r5, r0, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0xb8>
 8004388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800438c:	2d00      	cmp	r5, #0
 800438e:	da03      	bge.n	8004398 <_printf_i+0xd0>
 8004390:	232d      	movs	r3, #45	@ 0x2d
 8004392:	426d      	negs	r5, r5
 8004394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004398:	4859      	ldr	r0, [pc, #356]	@ (8004500 <_printf_i+0x238>)
 800439a:	230a      	movs	r3, #10
 800439c:	e011      	b.n	80043c2 <_printf_i+0xfa>
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	0608      	lsls	r0, r1, #24
 80043a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043a8:	d402      	bmi.n	80043b0 <_printf_i+0xe8>
 80043aa:	0649      	lsls	r1, r1, #25
 80043ac:	bf48      	it	mi
 80043ae:	b2ad      	uxthmi	r5, r5
 80043b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043b2:	4853      	ldr	r0, [pc, #332]	@ (8004500 <_printf_i+0x238>)
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	bf14      	ite	ne
 80043b8:	230a      	movne	r3, #10
 80043ba:	2308      	moveq	r3, #8
 80043bc:	2100      	movs	r1, #0
 80043be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043c2:	6866      	ldr	r6, [r4, #4]
 80043c4:	60a6      	str	r6, [r4, #8]
 80043c6:	2e00      	cmp	r6, #0
 80043c8:	bfa2      	ittt	ge
 80043ca:	6821      	ldrge	r1, [r4, #0]
 80043cc:	f021 0104 	bicge.w	r1, r1, #4
 80043d0:	6021      	strge	r1, [r4, #0]
 80043d2:	b90d      	cbnz	r5, 80043d8 <_printf_i+0x110>
 80043d4:	2e00      	cmp	r6, #0
 80043d6:	d04b      	beq.n	8004470 <_printf_i+0x1a8>
 80043d8:	4616      	mov	r6, r2
 80043da:	fbb5 f1f3 	udiv	r1, r5, r3
 80043de:	fb03 5711 	mls	r7, r3, r1, r5
 80043e2:	5dc7      	ldrb	r7, [r0, r7]
 80043e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043e8:	462f      	mov	r7, r5
 80043ea:	42bb      	cmp	r3, r7
 80043ec:	460d      	mov	r5, r1
 80043ee:	d9f4      	bls.n	80043da <_printf_i+0x112>
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d10b      	bne.n	800440c <_printf_i+0x144>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	07df      	lsls	r7, r3, #31
 80043f8:	d508      	bpl.n	800440c <_printf_i+0x144>
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	6861      	ldr	r1, [r4, #4]
 80043fe:	4299      	cmp	r1, r3
 8004400:	bfde      	ittt	le
 8004402:	2330      	movle	r3, #48	@ 0x30
 8004404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004408:	f106 36ff 	addle.w	r6, r6, #4294967295
 800440c:	1b92      	subs	r2, r2, r6
 800440e:	6122      	str	r2, [r4, #16]
 8004410:	f8cd a000 	str.w	sl, [sp]
 8004414:	464b      	mov	r3, r9
 8004416:	aa03      	add	r2, sp, #12
 8004418:	4621      	mov	r1, r4
 800441a:	4640      	mov	r0, r8
 800441c:	f7ff fee6 	bl	80041ec <_printf_common>
 8004420:	3001      	adds	r0, #1
 8004422:	d14a      	bne.n	80044ba <_printf_i+0x1f2>
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	b004      	add	sp, #16
 800442a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f043 0320 	orr.w	r3, r3, #32
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	4833      	ldr	r0, [pc, #204]	@ (8004504 <_printf_i+0x23c>)
 8004438:	2778      	movs	r7, #120	@ 0x78
 800443a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	6831      	ldr	r1, [r6, #0]
 8004442:	061f      	lsls	r7, r3, #24
 8004444:	f851 5b04 	ldr.w	r5, [r1], #4
 8004448:	d402      	bmi.n	8004450 <_printf_i+0x188>
 800444a:	065f      	lsls	r7, r3, #25
 800444c:	bf48      	it	mi
 800444e:	b2ad      	uxthmi	r5, r5
 8004450:	6031      	str	r1, [r6, #0]
 8004452:	07d9      	lsls	r1, r3, #31
 8004454:	bf44      	itt	mi
 8004456:	f043 0320 	orrmi.w	r3, r3, #32
 800445a:	6023      	strmi	r3, [r4, #0]
 800445c:	b11d      	cbz	r5, 8004466 <_printf_i+0x19e>
 800445e:	2310      	movs	r3, #16
 8004460:	e7ac      	b.n	80043bc <_printf_i+0xf4>
 8004462:	4827      	ldr	r0, [pc, #156]	@ (8004500 <_printf_i+0x238>)
 8004464:	e7e9      	b.n	800443a <_printf_i+0x172>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f023 0320 	bic.w	r3, r3, #32
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	e7f6      	b.n	800445e <_printf_i+0x196>
 8004470:	4616      	mov	r6, r2
 8004472:	e7bd      	b.n	80043f0 <_printf_i+0x128>
 8004474:	6833      	ldr	r3, [r6, #0]
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	6961      	ldr	r1, [r4, #20]
 800447a:	1d18      	adds	r0, r3, #4
 800447c:	6030      	str	r0, [r6, #0]
 800447e:	062e      	lsls	r6, r5, #24
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	d501      	bpl.n	8004488 <_printf_i+0x1c0>
 8004484:	6019      	str	r1, [r3, #0]
 8004486:	e002      	b.n	800448e <_printf_i+0x1c6>
 8004488:	0668      	lsls	r0, r5, #25
 800448a:	d5fb      	bpl.n	8004484 <_printf_i+0x1bc>
 800448c:	8019      	strh	r1, [r3, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	6123      	str	r3, [r4, #16]
 8004492:	4616      	mov	r6, r2
 8004494:	e7bc      	b.n	8004410 <_printf_i+0x148>
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	1d1a      	adds	r2, r3, #4
 800449a:	6032      	str	r2, [r6, #0]
 800449c:	681e      	ldr	r6, [r3, #0]
 800449e:	6862      	ldr	r2, [r4, #4]
 80044a0:	2100      	movs	r1, #0
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7fb febc 	bl	8000220 <memchr>
 80044a8:	b108      	cbz	r0, 80044ae <_printf_i+0x1e6>
 80044aa:	1b80      	subs	r0, r0, r6
 80044ac:	6060      	str	r0, [r4, #4]
 80044ae:	6863      	ldr	r3, [r4, #4]
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	2300      	movs	r3, #0
 80044b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b8:	e7aa      	b.n	8004410 <_printf_i+0x148>
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	4632      	mov	r2, r6
 80044be:	4649      	mov	r1, r9
 80044c0:	4640      	mov	r0, r8
 80044c2:	47d0      	blx	sl
 80044c4:	3001      	adds	r0, #1
 80044c6:	d0ad      	beq.n	8004424 <_printf_i+0x15c>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	079b      	lsls	r3, r3, #30
 80044cc:	d413      	bmi.n	80044f6 <_printf_i+0x22e>
 80044ce:	68e0      	ldr	r0, [r4, #12]
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	4298      	cmp	r0, r3
 80044d4:	bfb8      	it	lt
 80044d6:	4618      	movlt	r0, r3
 80044d8:	e7a6      	b.n	8004428 <_printf_i+0x160>
 80044da:	2301      	movs	r3, #1
 80044dc:	4632      	mov	r2, r6
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	47d0      	blx	sl
 80044e4:	3001      	adds	r0, #1
 80044e6:	d09d      	beq.n	8004424 <_printf_i+0x15c>
 80044e8:	3501      	adds	r5, #1
 80044ea:	68e3      	ldr	r3, [r4, #12]
 80044ec:	9903      	ldr	r1, [sp, #12]
 80044ee:	1a5b      	subs	r3, r3, r1
 80044f0:	42ab      	cmp	r3, r5
 80044f2:	dcf2      	bgt.n	80044da <_printf_i+0x212>
 80044f4:	e7eb      	b.n	80044ce <_printf_i+0x206>
 80044f6:	2500      	movs	r5, #0
 80044f8:	f104 0619 	add.w	r6, r4, #25
 80044fc:	e7f5      	b.n	80044ea <_printf_i+0x222>
 80044fe:	bf00      	nop
 8004500:	08007111 	.word	0x08007111
 8004504:	08007122 	.word	0x08007122

08004508 <memmove>:
 8004508:	4288      	cmp	r0, r1
 800450a:	b510      	push	{r4, lr}
 800450c:	eb01 0402 	add.w	r4, r1, r2
 8004510:	d902      	bls.n	8004518 <memmove+0x10>
 8004512:	4284      	cmp	r4, r0
 8004514:	4623      	mov	r3, r4
 8004516:	d807      	bhi.n	8004528 <memmove+0x20>
 8004518:	1e43      	subs	r3, r0, #1
 800451a:	42a1      	cmp	r1, r4
 800451c:	d008      	beq.n	8004530 <memmove+0x28>
 800451e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004526:	e7f8      	b.n	800451a <memmove+0x12>
 8004528:	4402      	add	r2, r0
 800452a:	4601      	mov	r1, r0
 800452c:	428a      	cmp	r2, r1
 800452e:	d100      	bne.n	8004532 <memmove+0x2a>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800453a:	e7f7      	b.n	800452c <memmove+0x24>

0800453c <_sbrk_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4d06      	ldr	r5, [pc, #24]	@ (8004558 <_sbrk_r+0x1c>)
 8004540:	2300      	movs	r3, #0
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fd f9f4 	bl	8001934 <_sbrk>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_sbrk_r+0x1a>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_sbrk_r+0x1a>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200002a0 	.word	0x200002a0

0800455c <memcpy>:
 800455c:	440a      	add	r2, r1
 800455e:	4291      	cmp	r1, r2
 8004560:	f100 33ff 	add.w	r3, r0, #4294967295
 8004564:	d100      	bne.n	8004568 <memcpy+0xc>
 8004566:	4770      	bx	lr
 8004568:	b510      	push	{r4, lr}
 800456a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004572:	4291      	cmp	r1, r2
 8004574:	d1f9      	bne.n	800456a <memcpy+0xe>
 8004576:	bd10      	pop	{r4, pc}

08004578 <_realloc_r>:
 8004578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457c:	4680      	mov	r8, r0
 800457e:	4615      	mov	r5, r2
 8004580:	460c      	mov	r4, r1
 8004582:	b921      	cbnz	r1, 800458e <_realloc_r+0x16>
 8004584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	4611      	mov	r1, r2
 800458a:	f7ff bc4b 	b.w	8003e24 <_malloc_r>
 800458e:	b92a      	cbnz	r2, 800459c <_realloc_r+0x24>
 8004590:	f7ff fbdc 	bl	8003d4c <_free_r>
 8004594:	2400      	movs	r4, #0
 8004596:	4620      	mov	r0, r4
 8004598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800459c:	f000 f81a 	bl	80045d4 <_malloc_usable_size_r>
 80045a0:	4285      	cmp	r5, r0
 80045a2:	4606      	mov	r6, r0
 80045a4:	d802      	bhi.n	80045ac <_realloc_r+0x34>
 80045a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045aa:	d8f4      	bhi.n	8004596 <_realloc_r+0x1e>
 80045ac:	4629      	mov	r1, r5
 80045ae:	4640      	mov	r0, r8
 80045b0:	f7ff fc38 	bl	8003e24 <_malloc_r>
 80045b4:	4607      	mov	r7, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0ec      	beq.n	8004594 <_realloc_r+0x1c>
 80045ba:	42b5      	cmp	r5, r6
 80045bc:	462a      	mov	r2, r5
 80045be:	4621      	mov	r1, r4
 80045c0:	bf28      	it	cs
 80045c2:	4632      	movcs	r2, r6
 80045c4:	f7ff ffca 	bl	800455c <memcpy>
 80045c8:	4621      	mov	r1, r4
 80045ca:	4640      	mov	r0, r8
 80045cc:	f7ff fbbe 	bl	8003d4c <_free_r>
 80045d0:	463c      	mov	r4, r7
 80045d2:	e7e0      	b.n	8004596 <_realloc_r+0x1e>

080045d4 <_malloc_usable_size_r>:
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f18      	subs	r0, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfbc      	itt	lt
 80045de:	580b      	ldrlt	r3, [r1, r0]
 80045e0:	18c0      	addlt	r0, r0, r3
 80045e2:	4770      	bx	lr

080045e4 <_init>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr

080045f0 <_fini>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr
